# -*- mode: org; coding: utf-8; -*-
#+TITLE: Ashfaq Farooqui's Emacs Configuration
#+AUTHOR: Ashfaq Farooqui
#+EMAIL: ashfaq@ashfaqfarooqui.me
#+OPTIONS: toc:3 num:nil
#+startup: overview


* Lexical binding
This is requried for the org roam stuff
#+begin_src emacs-lisp

;; -*- lexical-binding: t; -*-

#+end_src
* User Details
#+begin_src emacs-lisp

     (setq user-full-name "Ashfaq Farooqui")
     (setq user-mail-address "ashfaq@ashfaqfarooqui.me")

(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil) ; default is 7200 (2h)

#+end_src
* Visual  configuration

** In editor
taken from https://tecosaur.github.io/emacs-config/config.html#font-display
*** Symbols
It's also nice to change the character used for collapsed items (by default ~‚Ä¶~),
I think ~‚ñæ~ is better for indicating 'collapsed section'.
and add an extra ~org-bullet~ to the default list of four.
I've also added some fun alternatives, just commented out.
#+begin_src emacs-lisp
;; (after! org
;;   (use-package org-pretty-tags
;;   :config
;;    (setq org-pretty-tags-surrogate-strings
;;          `(("uni"        . ,(all-the-icons-faicon   "graduation-cap" :face 'all-the-icons-purple  :v-adjust 0.01))
;;            ("ucc"        . ,(all-the-icons-material "computer"       :face 'all-the-icons-silver  :v-adjust 0.01))
;;            ("assignment" . ,(all-the-icons-material "library_books"  :face 'all-the-icons-orange  :v-adjust 0.01))
;;            ("test"       . ,(all-the-icons-material "timer"          :face 'all-the-icons-red     :v-adjust 0.01))
;;            ("lecture"    . ,(all-the-icons-fileicon "keynote"        :face 'all-the-icons-orange  :v-adjust 0.01))
;;            ("email"      . ,(all-the-icons-faicon   "envelope"       :face 'all-the-icons-blue    :v-adjust 0.01))
;;            ("read"       . ,(all-the-icons-octicon  "book"           :face 'all-the-icons-lblue   :v-adjust 0.01))
;;            ("article"    . ,(all-the-icons-octicon  "file-text"      :face 'all-the-icons-yellow  :v-adjust 0.01))
;;            ("web"        . ,(all-the-icons-faicon   "globe"          :face 'all-the-icons-green   :v-adjust 0.01))
;;            ("info"       . ,(all-the-icons-faicon   "info-circle"    :face 'all-the-icons-blue    :v-adjust 0.01))
;;            ("issue"      . ,(all-the-icons-faicon   "bug"            :face 'all-the-icons-red     :v-adjust 0.01))
;;            ("someday"    . ,(all-the-icons-faicon   "calendar-o"     :face 'all-the-icons-cyan    :v-adjust 0.01))
;;            ("idea"       . ,(all-the-icons-octicon  "light-bulb"     :face 'all-the-icons-yellow  :v-adjust 0.01))
;;            ("emacs"      . ,(all-the-icons-fileicon "emacs"          :face 'all-the-icons-lpurple :v-adjust 0.01))))
;;    (org-pretty-tags-global-mode)))

(after! org-superstar
  (setq org-superstar-headline-bullets-list '("‚óâ" "‚óã" "‚ú∏" "‚úø" "‚ú§" "‚úú" "‚óÜ" "‚ñ∂")
        ;; org-superstar-headline-bullets-list '("‚Ö†" "‚Ö°" "‚Ö¢" "‚Ö£" "‚Ö§" "‚Ö•" "‚Ö¶" "‚Öß" "‚Ö®" "‚Ö©")
        org-superstar-prettify-item-bullets t ))
(after! org
  (setq org-ellipsis " ‚ñæ "
        org-priority-highest ?A
        org-priority-lowest ?E
        org-priority-faces
        '((?A . 'all-the-icons-red)
          (?B . 'all-the-icons-orange)
          (?C . 'all-the-icons-yellow)
          (?D . 'all-the-icons-green)
          (?E . 'all-the-icons-blue))))
#+end_src
It's also nice to make use of the Unicode characters for check boxes, and other commands.
#+begin_src emacs-lisp
(after! org
  (appendq! +ligatures-extra-symbols
            `(:checkbox      "‚òê"
              :pending       "‚óº"
              :checkedbox    "‚òë"
              :list_property "‚à∑"
              :results       "ü†∂"
              :property      "‚ò∏"
              :properties    "‚öô"
              :end           "‚àé"
              :options       "‚å•"
              :title         "ùôè"
              :subtitle      "ùô©"
              :author        "ùòº"
              :date          "ùòø"
              :latex_header  "‚á•"
              :latex_class   "üÑ≤"
              :beamer_header "‚Ü†"
              :begin_quote   "‚ùÆ"
              :end_quote     "‚ùØ"
              :begin_export  "‚ØÆ"
              :end_export    "‚Ø¨"
              :priority_a   ,(propertize "‚öë" 'face 'all-the-icons-red)
              :priority_b   ,(propertize "‚¨Ü" 'face 'all-the-icons-orange)
              :priority_c   ,(propertize "‚ñ†" 'face 'all-the-icons-yellow)
              :priority_d   ,(propertize "‚¨á" 'face 'all-the-icons-green)
              :priority_e   ,(propertize "‚ùì" 'face 'all-the-icons-blue)
              :em_dash       "‚Äî"))
  (set-ligatures! 'org-mode
    :merge t
    :checkbox      "[ ]"
    :pending       "[-]"
    :checkedbox    "[X]"
    :list_property "::"
    :results       "#+results:"
    :property      "#+property:"
    :property      ":PROPERTIES:"
    :end           ":END:"
    :options       "#+options:"
    :title         "#+title:"
    :subtitle      "#+subtitle:"
    :author        "#+author:"
    :date          "#+date:"
    :latex_class   "#+latex_class:"
    :latex_header  "#+latex_header:"
    :beamer_header "#+beamer_header:"
    :begin_quote   "#+begin_quote"
    :end_quote     "#+end_quote"
    :begin_export  "#+begin_export"
    :end_export    "#+end_export"
    :priority_a    "[#A]"
    :priority_b    "[#B]"
    :priority_c    "[#C]"
    :priority_d    "[#D]"
    :priority_e    "[#E]"
    :em_dash       "---"))
(plist-put +ligatures-extra-symbols :name "‚Åç") ; or ‚Ä∫ could be good?
#+end_src
We also like ~org-fragtog~, and that wants a hook.
#+begin_src emacs-lisp
;(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src
** COMMENT Fonts
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 24)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font Mono" :size 35)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 25)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))

                                        ;(setq doom-font (font-spec :family "Overpass" :size 30)
                                        ;  doom-big-font (font-spec :family "fira code retina" :size 50)
                                        ;doom-variable-pitch-font (font-spec :family "Overpass" :size 33))
(after! doom-theme
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))



                                        ;(setq doom-font (font-spec :family "mononoki Nerd Font" :size 12 :weight 'semi-light)
                                        ;      doom-variable-pitch-font (font-spec :family "mononoki Nerd Font") ; inherits `doom-font''s :size
                                        ;      doom-big-font (font-spec :family "mononoki Nerd Font" :size 19))




                                        ;(setq doom-font (font-spec :family "mononoki Nerd Font" :size 12 :weight 'semi-light)
                                        ;      doom-variable-pitch-font (font-spec :family "Fira Sans") ; inherits `doom-font''s :size
                                        ;      doom-unicode-font (font-spec :family "mononoki Nerd Font" :size 12)
                                        ;      doom-big-font (font-spec :family "Fira Mono" :size 19))


                                        ;(setq doom-font (font-spec :family "Mononoki Nerd Font" :size 30)
                                        ;      doom-big-font (font-spec :family "Mononoki Nerd Font" :size 36)
                                        ;      doom-variable-pitch-font (font-spec :family "iA Writer Quattro S" :size 24)
                                        ;)



                                        ;(setq doom-font (font-spec :family "iA Writer Quattro S" :size 24)
                                        ;      doom-big-font (font-spec :family "iA Writer Quattro S" :size 36)
                                        ;      doom-variable-pitch-font (font-spec :family "iA Writer Quattro S" :size 24)
                                        ;      doom-serif-font (font-spec :family "iA Writer Quattro S" :weight 'light))
#+END_SRC

** Rainbow mode
#+BEGIN_SRC emacs-lisp
(use-package! rainbow-mode
  :after rainbow-delimiter
:init (rainbow-mode))

#+END_SRC

** nyan mode
#+BEGIN_SRC emacs-lisp
    (after! nyan-mode
         :init
        (nyan-mode))


#+END_SRC
*
* My Defaults
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
** Evil
#+begin_src emacs-lisp
(setq evil-move-cursor-back nil)


#+end_src

** Supersave
#+begin_src emacs-lisp
(after! super-save
(super-save-mode 1)
(setq super-save-exclude '(".gpg"))
(setq super-save-auto-save-when-idle t)
)
#+END_SRC
** Wrap paragraphs automatically
I don't like =AutoFillMode= which  automatically wraps paragraphs, kinda
like hitting =M-q=. But i like wrapped paragraphs, hence use visual fill
mode

#+BEGIN_SRC emacs-lisp

        (add-hook! org-mode :append
                   #'visual-line-mode)

        (add-hook! text-mode :append
                   #'visual-line-mode)

        (add-hook! latex-mode :append
                   #'visual-line-mode)

        (use-package! visual-fill-column
          :config
          (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
          (advice-add 'text-scale-adjust :after
                      #'visual-fill-column-adjust)
          (setq visual-fill-column-width 100)
          (setq-default fill-column 100)
          (setq visual-fill-column-center-text t)
          )
#+END_SRC
#+RESULTS:
: t

** smartparens
#+BEGIN_SRC emacs-lisp

(after! smartparens
  :config
  (map! :map smartparens-mode-map
        "C-M-f" #'sp-forward-sexp
        "C-M-b" #'sp-backward-sexp
        "C-M-u" #'sp-backward-up-sexp
        "C-M-d" #'sp-down-sexp
        "C-M-p" #'sp-backward-down-sexp
        "C-M-n" #'sp-up-sexp
        "C-M-s" #'sp-splice-sexp
        "C-)" #'sp-forward-slurp-sexp
        "C-}" #'sp-forward-barf-sexp
        "C-(" #'sp-backward-slurp-sexp
        "C-M-)" #'sp-backward-slurp-sexp
        "C-M-)" #'sp-backward-barf-sexp))
#+END_SRC
** dubcaps mode
#+BEGIN_SRC emacs-lisp
(after! org
  (defun dcaps-to-scaps ()
    "Convert word in DOuble CApitals to Single Capitals."
    (interactive)
    (and (= ?w (char-syntax (char-before)))
         (save-excursion
           (let ((end (point)))
             (and (if (called-interactively-p)
                      (skip-syntax-backward "w")
                    (= -3 (skip-syntax-backward "w")))
                  (let (case-fold-search)
                    (looking-at "\\b[[:upper:]]\\{2\\}[[:lower:]]"))
                  (capitalize-region (point) end))))))
  (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)

  (define-minor-mode dubcaps-mode
    "Toggle `dubcaps-mode'.  Converts words in DOuble CApitals to
Single Capitals as you type."
    :init-value nil
    :lighter (" DC")
    (if dubcaps-mode
        (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)
      (remove-hook 'post-self-insert-hook #'dcaps-to-scaps 'local)))


  (add-hook 'text-mode-hook #'dubcaps-mode)
  (add-hook 'org-mode-hook #'dubcaps-mode))
#+END_SRC
** info colors
#+BEGIN_SRC emacs-lisp

(use-package! info-colors
  :defer t
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)

                                        ;(add-hook 'Info-mode-hook #'mixed-pitch-mode)
#+END_SRC
** Plaintext ascii colors
#+BEGIN_SRC emacs-lisp
(after! text-mode
  (add-hook! 'text-mode-hook
             ;; Apply ANSI color codes
             (with-silent-modifications
               (ansi-color-apply-on-region (point-min) (point-max)))))

#+END_SrC

** Spell check
#+begin_src emacs-lisp

(setq ispell-dictionary "en")
#+end_src
** Greedily run on daemon load
#+begin_src emacs-lisp

(defun greedily-do-daemon-setup ()
  (require 'org)
  (when (require 'mu4e nil t)
    (setq mu4e-confirm-quit t)
    (setq +mu4e-lock-greedy t)
    (setq +mu4e-lock-relaxed t)
    (+mu4e-lock-add-watcher)
    (when (+mu4e-lock-available t)
      (mu4e~start)))
  (when (require 'elfeed nil t)
    (run-at-time nil (* 8 60 60) #'elfeed-update)))

(when (daemonp)
  (add-hook 'emacs-startup-hook #'greedily-do-daemon-setup)
(add-hook! 'server-after-make-frame-hook (switch-to-buffer +doom-dashboard-name))
                        )
#+end_src
** Modes
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)                         ; Replace selection when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(display-battery-mode 1)                          ; On laptops it's nice to know how much power you have
(global-subword-mode 1)                           ; Iterate through CamelCase words
(setq initial-major-mode 'org-mode)
(setq hungry-delete-mode t)
(show-smartparens-mode)
(global-hungry-delete-mode)
(nyan-mode)
#+END_SRC
** Modeline
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src



** Encryption
#+BEGIN_SRC emacs-lisp
(after! org
(setq org-crypt-disable-auto-save nil)
(require 'org-crypt)
; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
; GPG key to use for encryption
(setq org-crypt-key "51DE2D88")
)
#+END_SRC

#+RESULTS:
: 51DE2D88

** Org download
#+begin_src emacs-lisp
(setq org-download-screenshot-method "scrot -s %s")

#+end_src

#+RESULTS:
: scrot -s %s



** Surround region with emphasis or syntax characters
Define and bind interactive commands for each of KEYS that surround the region or insert text. Commands are bound in org-mode-map to each of KEYS. If the region is active, commands surround it with the key character, otherwise call org-self-insert-command.
Taken from: https://github.com/alphapapa/unpackaged.el#surround-region-with-emphasis-or-syntax-characters
#+BEGIN_SRC emacs-lisp
;;;###autoload


(after! org
(defmacro unpackaged/def-org-maybe-surround (&rest keys)
  "Define and bind interactive commands for each of KEYS that surround the region or insert text.
Commands are bound in `org-mode-map' to each of KEYS.  If the
region is active, commands surround it with the key character,
otherwise call `org-self-insert-command'."
  `(progn
     ,@(cl-loop for key in keys
                for name = (intern (concat "unpackaged/org-maybe-surround-" key))
                for docstring = (format "If region is active, surround it with \"%s\", otherwise call `org-self-insert-command'." key)
                collect `(defun ,name ()
                           ,docstring
                           (interactive)
                           (if (region-active-p)
                               (let ((beg (region-beginning))
                                     (end (region-end)))
                                 (save-excursion
                                   (goto-char end)
                                   (insert ,key)
                                   (goto-char beg)
                                   (insert ,key)))
                             (call-interactively #'org-self-insert-command)))
                collect `(define-key org-mode-map (kbd ,key) #',name))))

(unpackaged/def-org-maybe-surround "~" "=" "*" "/" "+"))
#+END_SRC
** org-attach
#+begin_src emacs-lisp

;(setq org-attach-id-dir "./.attach")
#+end_src
** Exporting (general)
#+begin_src emacs-lisp
(after! org (setq org-export-headline-levels 5)) ; I like nesting
#+end_src
I'm also going to make use of an item in =ox-extra= so that I can add an =:ignore:=
tag to headings for the content to be kept, but the heading itself ignored
(unlike =:noexport:= which ignored both heading and content). This is useful when
I want to use headings to provide a structure for writing that doesn't appear in
the final documents.
#+begin_src emacs-lisp
(after! org
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+end_src
** Importing
#+begin_src emacs-lisp
(defun markdown-convert-buffer-to-org ()
    "Convert the current buffer's content from markdown to orgmode format and save it with the current buffer's file name but with .org extension."
    (interactive)
    (shell-command-on-region (point-min) (point-max)
                             (format "pandoc -f markdown -t org -o %s"
                                     (concat (file-name-sans-extension (buffer-file-name)) ".org"))))

#+end_src

* Promela mode
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.doom.d/lisp/promela-mode")
(require 'promela-mode)
                (autoload 'promela-mode "promela-mode" "PROMELA mode" nil t)
(setq auto-mode-alist
      (append
       (list (cons "\\.promela$"  'promela-mode)
     (cons "\\.spin$"     'promela-mode)
     (cons "\\.pml$"      'promela-mode)
 (cons "\\.other-extensions$"     'promela-mode)
     )
       auto-mode-alist))

#+end_src
* COMMENT Narrow widen
Taken from https://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
#+BEGIN_SRC emacs-lisp

(after! org
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  )
#+END_SRC
* treemacs
#+BEGIN_SRC emacs-lisp
(after! treemacs
  (defvar treemacs-file-ignore-extensions '()
    "File extension which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-globs '()
    "Globs which will are transformed to `treemacs-file-ignore-regexps' which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-regexps '()
    "RegExps to be tested to ignore files, generated from `treeemacs-file-ignore-globs'")
  (defun treemacs-file-ignore-generate-regexps ()
    "Generate `treemacs-file-ignore-regexps' from `treemacs-file-ignore-globs'"
    (setq treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp treemacs-file-ignore-globs)))
  (if (equal treemacs-file-ignore-globs '()) nil (treemacs-file-ignore-generate-regexps))
  (defun treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions', and `treemacs-file-ignore-regexps'"
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (let ((ignore-file nil))
          (dolist (regexp treemacs-file-ignore-regexps ignore-file)
            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-filter))

        (setq treemacs-file-ignore-extensions
      '(;; LaTeX
        "aux"
        "ptc"
        "fdb_latexmk"
        "fls"
        "synctex.gz"
        "toc"
        ;; LaTeX - glossary
        "glg"
        "glo"
        "gls"
        "glsdefs"
        "ist"
        "acn"
        "acr"
        "alg"
        ;; LaTeX - pgfplots
        "mw"
        ;; LaTeX - pdfx
        "pdfa.xmpi"
        ))
(setq treemacs-file-ignore-globs
      '(;; LaTeX
        "*/_minted-*"
        ;; AucTeX
        "*/.auctex-auto"
        "*/_region_.log"
        "*/_region_.tex"))

#+END_SRC

* Applications
** COMMENT GTD with org roam
Taking inspiration from [[https://github.com/rougier/emacs-gtd][GitHub - rougier/emacs-gtd: Get Things Done with Emacs]]

#+begin_src emacs-lisp
(after! org
(defun org-capture-mail ()
  (interactive)
  (call-interactively 'org-store-link)
  (org-capture nil "e"))

(map! :map mu4e-headers-mode-map
      :ne "p" 'org-capture-mail)

(map! :map mu4e-view-mode-map
      :ne "p" 'org-capture-mail)


)
#+end_src

*** COMMENT agenda
#+begin_src emacs-lisp
(after! org
  (defun my/style-org-agenda()
 ;; (my/buffer-face-mode-variable)
  (set-face-attribute 'org-agenda-date nil :height 1.1)
  (set-face-attribute 'org-agenda-date-today nil :height 1.1 :slant 'italic)
  (set-face-attribute 'org-agenda-date-weekend nil :height 1.1))

(add-hook 'org-agenda-mode-hook 'my/style-org-agenda)

(setq org-agenda-breadcrumbs-separator " ‚ù± "
      org-agenda-current-time-string "‚è∞ ‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà now"
      org-agenda-time-grid '((weekly today require-timed)
                             (800 1000 1200 1400 1600 1800 2000)
                             "---" "‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà")
      org-agenda-prefix-format '((agenda . "%i %-12:c%?-12t%b% s")
                                 (todo . " %i %-12:c")
                                 (tags . " %i %-12:c")
                                 (search . " %i %-12:c")))

(setq org-agenda-format-date (lambda (date) (concat "\n" (make-string (window-width) 9472)
                                                    "\n"
                                                    (org-agenda-format-date-aligned date))))
(setq org-cycle-separator-lines 2)
(setq org-agenda-category-icon-alist
      `(("Work" ,(list (all-the-icons-faicon "cogs")) nil nil :ascent center)
        ("Personal" ,(list (all-the-icons-material "person")) nil nil :ascent center)
        ("Calendar" ,(list (all-the-icons-faicon "calendar")) nil nil :ascent center)
        ("Reading" ,(list (all-the-icons-faicon "book")) nil nil :ascent center)))

    (defun my/org-roam-refresh-agenda-list ()
      (interactive)



      (setq org-agenda-files (append (my/roam-get-project-files)
                                     (my/roam-get-area-files)
                                     (my/roam-filter-by-tag "REFILE")
                                     ))

      (add-to-list 'org-agenda-files org-basb-main-file)
      (add-to-list 'org-agenda-files org-inbox-file)
      (add-to-list 'org-agenda-files org-inbox-orgzly-file)
      )

    ;; Build the agenda list the first time for the session
    (my/org-roam-refresh-agenda-list)
    )
#+end_src


** Magit
#+BEGIN_SRC emacs-lisp
;;; :tools magit

(after! magit

 (setq       magit-save-repository-buffers nil
      ;; Don't restore the wconf after quitting magit, it's jarring
      magit-inhibit-save-previous-winconf t
      transient-values '((magit-commit "--gpg-sign=7A804BCB51DE2D88")
                         (magit-rebase "--autosquash" "--gpg-sign=7A804BCB51DE2D88")
                         (magit-pull "--rebase" "--gpg-sign=7A804BCB51DE2D88")))

 (setq magit-repolist-columns
      '(("Name"    25 magit-repolist-column-ident                  ())
        ("Version" 25 magit-repolist-column-version                ())
        ("D"        1 magit-repolist-column-dirty                  ())
        ("Branch"  10 magit-repolist-column-branch                () )
        ("L<U"      3 magit-repolist-column-unpulled-from-upstream ((:right-align t)))
        ("L>U"      3 magit-repolist-column-unpushed-to-upstream   ((:right-align t)))
        ("Path"    99 magit-repolist-column-path                   ())))


)
#+END_SRC


** COMMENT GTD and PARA
Inspired from https://github.com/mwfogleman/.emacs.d/blob/master/michael.org
*** Projects
A project is ‚Äúany outcome that will take more than one action step to complete.‚Äù As a result of implementing Tiago Forte‚Äôs ‚ÄúPARA‚Äù system, I can ensure that I always have an up to date project list.
#+begin_src emacs-lisp
(after! org (defun go-to-projects ()
  (interactive)
  (find-file org-basb-main-file)
  (widen)
  (beginning-of-buffer)
  (re-search-forward "* Projects")
  (beginning-of-line))

(defun project-overview ()
  (interactive)
  (go-to-projects)
  (org-narrow-to-subtree)
  (org-sort-entries t ?p)
  (org-columns))

(defun project-deadline-overview ()
  (interactive)
  (go-to-projects)
  (org-narrow-to-subtree)
  (org-sort-entries t ?d)
  (org-columns))
)
#+end_src
The concept of Stuck Projects comes from David Allen‚Äôs GTD. A stuck project is a project without any action steps or tasks associated with it.

Org-Mode has the ability to tell you which subtrees don‚Äôt have tasks associated with them. You can also configure what it recognizes as a stuck project. Unfortunately, by default, this functionality picks up a lot of noise.

This function creates an agenda of stuck projects that is restricted to my ‚ÄúProjects‚Äù subtree.
#+begin_src emacs-lisp
(after! org (defun my-org-agenda-list-stuck-projects ()
  (interactive)
  (go-to-projects)
  (org-agenda nil "#" 'subtree))
)
#+end_src

*** COMMENT Areas
#+begin_src emacs-lisp
(after! org  (defun go-to-areas ()
    (interactive)
    (find-file org-basb-main-file)
    (widen)
    (beginning-of-buffer)
    (re-search-forward "* Areas")
    (beginning-of-line))

(defun areas-overview ()
    (interactive)
    (go-to-areas)
    (org-narrow-to-subtree)
    (org-columns))
)
#+end_src

*** COMMENT Reviews
#+begin_src emacs-lisp
(after! org (defun my-new-daily-review ()
  (interactive)
  (let ((org-capture-templates '(("d" "Review: Daily Review" entry (file+olp+datetree "/tmp/reviews.org")
                                  (file "~/.doom.d/templates/dailyreviewtemplate.org")))))
    (progn
      (org-capture nil "d")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree)
      (fetch-calendar)
      (org-clock-in))))

(defun my-new-weekly-review ()
  (interactive)
  (let ((org-capture-templates '(("w" "Review: Weekly Review" entry (file+olp+datetree "/tmp/reviews.org")
                                  (file "~/.doom.d/templates/weeklyreviewtemplate.org")))))
    (progn
      (org-capture nil "w")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree)
      (fetch-calendar)
      (org-clock-in))))

(defun my-new-monthly-review ()
  (interactive)
  (let ((org-capture-templates '(("m" "Review: Monthly Review" entry (file+olp+datetree "/tmp/reviews.org")
                                  (file "~/.doom.d/templates/monthlyreviewtemplate.org")))))
    (progn
      (org-capture nil "m")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree)
      (fetch-calendar)
      (org-clock-in))))


;(bind-keys :prefix-map review-map
;           :prefix "C-z d"
;           ("d" . my-new-daily-review)
;           ("w" . my-new-weekly-review)
;           ("m" . my-new-monthly-review))

(f-touch "/tmp/reviews.org")

)


#+end_src

** COMMENT lexic
#+BEGIN_SRC emacs-lisp
(use-package! lexic
  :defer t
  :commands lexic-search lexic-list-dictionary
  )
#+END_SRC

#+RESULTS:

** COMMENT Mail setup
*** COMMENT Mu4e
#+BEGIN_SRC emacs-lisp

(after! mu4e
  (setq mu4e-maildir-shortcuts
        '( ("/ri.se/Inbox"               . ?i)
           ("/ashfaqfarooqui.me/Inbox"   . ?p)))

  (setq mu4e-headers-fields
        '((:flags . 6)
          (:account-stripe . 2)
          (:from-or-to . 25)
          (:folder . 10)
          (:recipnum . 2)
          (:subject . 80)
          (:human-date . 8))
        +mu4e-min-header-frame-width 142
        mu4e-headers-date-format "%d/%m/%y"
        mu4e-headers-time-format "‚ßñ %H:%M"
        mu4e-headers-results-limit 1000
        mu4e-index-cleanup t)

  (add-to-list 'mu4e-bookmarks
               '(:name "Yesterday's messages" :query "date:2d..1d" :key ?y) t)

  (defvar +mu4e-header--folder-colors nil)
  (appendq! mu4e-header-info-custom
            '((:folder .
               (:name "Folder" :shortname "Folder" :help "Lowest level folder" :function
                (lambda (msg)
                  (+mu4e-colorize-str
                   (replace-regexp-in-string "\\`.*/" "" (mu4e-message-field msg :maildir))
                   '+mu4e-header--folder-colors))))))


  ;; spell check
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
  (setq mu4e-update-interval 600)



                                        ;(setq mu4e-compose-signature-auto-include t)




  (setq mu4e-enable-mode-line t)

  (set-email-account! "ashfaqfarooqui.me"
                      '(
                        ( user-mail-address      . "ashfaq@ashfaqfarooqui.me"  )
                        ( user-full-name         . "Ashfaq Farooqui" )
                        (mu4e-sent-folder       . "/ashfaqfarooqui.me/Sent")
                        (mu4e-drafts-folder     . "/ashfaqfarooqui.me/Drafts")
                        (mu4e-trash-folder      . "/ashfaqfarooqui.me/Trash")
                        (mu4e-refile-folder     . "/ashfaqfarooqui.me/Archive")
                        (smtpmail-smtp-user     . "ashfaq.farooqui@mailbox.org")
                        ;;    (user-mail-address      . "ashfaq@ashfaqfarooqui.me")    ;; only needed for mu < 1.4
                        (mu4e-attachment-dir . "~/Documents/MailAttachments/Personal")
                        (smtpmail-smtp-server . "smtp.mailbox.org")
                        (smtpmail-stream-type . ssl )
                        (smtpmail-smtp-service . 465)
                        (mu4e-compose-signature . "---\nAshfaq Farooqui"))
                      t)
  (set-email-account! "ri.se"
                      '(
                        ( user-mail-address      . "ashfaq.farooqui@ri.se"  )
                        ( user-full-name         . "Ashfaq Farooqui" )
                        (mu4e-sent-folder       . "/ri.se/Sent Mail")
                        (mu4e-drafts-folder     . "/ri.se/Drafts")
                        (mu4e-trash-folder      . "/ri.se/Trash")
                        (mu4e-refile-folder     . "/ri.se/Arkiv")
                        (smtpmail-smtp-user     . "ashfaq.farooqui@ri.se")
                        ;;    (user-mail-address      . "ashfaq@ashfaqfarooqui.me")    ;; only needed for mu < 1.4
                        (mu4e-attachment-dir . "~/Documents/MailAttachments/ri.se")
                        (mu4e-compose-signature . "//Ashfaq Farooqui")
                        ( smtpmail-smtp-server   . "localhost" )
                        (smtpmail-stream-type . nil )
                        ( smtpmail-smtp-service . 1025)
                        )
                      t)

                                        ;(setq smtpmail-debug-verb t)


                                        ;(setq mu4e-compose-signature message-signature)


  )
#+END_SRC

*** COMMENT MU4e attachments
#+BEGIN_SRC emacs-lisp

       ;;;Taking the below from [[http://mbork.pl/2016-02-06_An_attachment_reminder_in_mu4e]]
(after! mu4e
    (defun mbork/message-attachment-present-p ()
      "Return t if an attachment is found in the current message."
      (save-excursion
        (save-restriction
          (widen)
          (goto-char (point-min))
          (when (search-forward "<#part" nil t) t))))

    (defcustom mbork/message-attachment-intent-re
      (regexp-opt '("I attach"
                    "I have attached"
                    "I've attached"
                    "I have included"
                    "I've included"
                    "see the attached"
                    "see the attachment"
                    "attached file"))
      "A regex which - if found in the message, and if there is no
    attachment - should launch the no-attachment warning.")

    (defcustom mbork/message-attachment-reminder
      "Are you sure you want to send this message without any attachment? "
      "The default question asked when trying to send a message
    containing `mbork/message-attachment-intent-re' without an
    actual attachment.")

    (defun mbork/message-warn-if-no-attachments ()
      "Ask the user if s?he wants to send the message even though
    there are no attachments."
      (when (and (save-excursion
                   (save-restriction
                     (widen)
                     (goto-char (point-min))
                     (re-search-forward mbork/message-attachment-intent-re nil t)))
                 (not (mbork/message-attachment-present-p)))
        (unless (y-or-n-p mbork/message-attachment-reminder)
          (keyboard-quit))))

    (add-hook 'message-send-hook #'mbork/message-warn-if-no-attachments)


)
#+END_SRC

*** COMMENT org-msg
#+begin_src emacs-lisp
(after! org-msg
                                        ;use-package! org-msg
                                        ;  :after mu4e
                                        ;:config
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil"
	org-msg-startup "hidestars indent inlineimages"
	org-msg-greeting-fmt "\nHi *%s*,\n\n"
	org-msg-greeting-name-limit 3
	org-msg-signature "



 #+begin_signature
 //Ashfaq
 #+end_signature")
  )
#+end_src

** Activity watcher
#+begin_src emacs-lisp
(after! activity-watch-mode
  (global-activity-watch-mode))

#+end_src

* Lsp

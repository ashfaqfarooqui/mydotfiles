#+TITLE: Ashfaq Farooqui's Emacs 24 Configuration
#+AUTHOR: Ashfaq Farooqui
#+EMAIL: ashfaq.farooqui@gmail.com
#+OPTIONS: toc:3 num:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

* Configuration
  Emacs is a special beast. Taming it takes a lot of care. In an
  attempt to document/explain/share with the rest of the world, this
  is my attempt at configuration as a literate program. It also shows
  off the awesome power of org-mode, which makes all of this possible.
  This configuration file is build by looking and drawing inspiration from different sources. HRS and AARON deserve a mention. 
** User details
   :PROPERTIES:
   :CUSTOM_ID: user-info
   :END:

   Emacs will normally pick this up automatically, but this way I can
   be sure the right information is always present.
   #+begin_src emacs-lisp
     (setq user-full-name "Ashfaq Farooqui")
     (setq user-mail-address "ashfaq.farooqui@gmail.com")
   #+end_src
   
** Package Management
   :PROPERTIES:
   :CUSTOM_ID: package-management
   :END:

   Since Emacs 24, Emacs includes the Emacs Lisp Package Archive
   ([[http://www.emacswiki.org/emacs/ELPA][ELPA]]) by default. This provides a nice way to install additional
   packages. Since the default package archive doesn't include
   everything necessary, the [[http://marmalade-repo.org/][marmalade]], and [[http://melpa.milkbox.net/#][melpa]] repositories are also
   added.
   #+begin_src emacs-lisp
     (load "package")
     (package-initialize)
     (add-to-list 'package-archives
                  '("marmalade" . "http://marmalade-repo.org/packages/"))
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)

     (setq package-archive-enable-alist '(("melpa" magit f)))
     (require 'cl)
   #+end_src
*** Define default packages
    :PROPERTIES:
    :CUSTOM_ID: default-packages
    :END:

    This is the list of packages used in this configuration.
    #+begin_src emacs-lisp
                              (defvar ashfaq/packages '(ac-slime
                                                        auto-complete
                                                        autopair
                                                        ess
                                                        f
                                                        feature-mode
                                                        engine-mode
                                                        flycheck
                                                        graphviz-dot-mode
                                                        haml-mode
                                                        htmlize
                                                        magit
                                                        markdown-mode
                                                        marmalade
                                                        cl
                                                        org
                                                        powerline
                                                        smex
                                                        solarized-theme
                                                        web-mode
                                                        writegood-mode
                                                        yaml-mode
                                                        ensime
                                                        multiple-cursors
                                                        find-file-in-repository
                                                        ace-jump-mode
                                                        yasnippet
                                                        window-numbering
                                                        expand-region
                                                        neotree
                                                        monokai-theme
                                                        rainbow-delimiters
                                                        slime
                                                        yafolding
                                                        ido-grid-mode
                                                        dumb-jump
                                                        projectile
                                                        evil
                                                        helm
                                                        org-bullets
                                                        guide-key)
                              "Default packages")
    #+end_src
*** Install default packages
    :PROPERTIES:
    :CUSTOM_ID: package-install
    :END:

    When Emacs boots, check to make sure all of the packages defined
    in =ashfaq/packages= are installed. If not, have ELPA take care of
    it.
    #+begin_src emacs-lisp
      (defun ashfaq/packages-installed-p ()
        (loop for pkg in ashfaq/packages
              when (not (package-installed-p pkg)) do (return nil)
              finally (return t)))

      (unless (ashfaq/packages-installed-p)
        (message "%s" "Refreshing package database...")
        (package-refresh-contents)
        (dolist (pkg ashfaq/packages)
          (when (not (package-installed-p pkg))
            (package-install pkg))))
    #+end_src
*** Start-up options
   :PROPERTIES:
   :CUSTOM_ID: start-up-options
   :END:
;;   #+begin_src emacs-lisp
;;     (find-file "~/Dropbox/orgs/Phd Notebook.org")
;;   #+end_src
*** Splash Screen
    :PROPERTIES:
    :CUSTOM_ID: splash-screen
    :END:

    I want to skip straight to the scratch buffer. This turns off the
    splash screen and puts me straight into the scratch buffer. I
    don't really care to have anything in there either, so turn off
    the message while we're at it. Since I end up using =org-mode=
    most of the time, set the default mode accordingly.
    #+begin_src emacs-lisp
      (setq inhibit-splash-screen t
            initial-scratch-message nil
            initial-major-mode 'org-mode)
    #+end_src
*** Scroll bar, Tool bar, Menu bar
    :PROPERTIES:
    :CUSTOM_ID: menu-bars
    :END:

    Emacs starts up with way too much enabled. Configure the scroll bar,
    menu bar, and tool bar. There isn't really a reason to have them
    on.
    #+begin_src emacs-lisp
      (scroll-bar-mode 1)
      (tool-bar-mode -1)
      (menu-bar-mode 1)
    #+end_src
*** Marking text
    :PROPERTIES:
    :CUSTOM_ID: regions
    :END:

    There are some behaviors in Emacs that aren't intuitive. Since I
    pair with others that don't know how Emacs handles highlighting,
    treat regions like other text editors. This means typing when the
    mark is active will write over the marked region. Also, make the
    common highlighting keystrokes work the way most people expect
    them to. This saves a lot of time explaining how to highlight
    areas of text. Emacs also has it's own clipboard and doesn't
    respond to the system clipboard by default, so tell Emacs that
    we're all friends and can get along.
    #+begin_src emacs-lisp
      (delete-selection-mode t)
      (transient-mark-mode t)
      (setq x-select-enable-clipboard t)
    #+end_src
*** Display Settings
    :PROPERTIES:
    :CUSTOM_ID: buffers
    :END:

    I have some modifications to the default display. First, a
    minor tweak to the frame title. It's also nice to be able to see
    when a file actually ends. This will put empty line markers into
    the left hand side.
    #+begin_src emacs-lisp


      (setq-default indicate-empty-lines t)
      (when (not indicate-empty-lines)
        (toggle-indicate-empty-lines))
    #+end_src
*** Indentation
    :PROPERTIES:
    :CUSTOM_ID: indentation
    :END:

    There's nothing I dislike more than tabs in my files. Make sure I
    don't share that discomfort with others.
    #+begin_src emacs-lisp
      (setq tab-width 2
            indent-tabs-mode nil)
    #+end_src
*** Backup files
    :PROPERTIES:
    :CUSTOM_ID: backup-files
    :END:

    Some people like to have them. I don't. Rather than pushing them
    to a folder, never to be used, just turn the whole thing off.
    #+begin_src emacs-lisp
      (setq make-backup-files nil)
    #+end_src
*** Yes and No
    :PROPERTIES:
    :CUSTOM_ID: yes-and-no
    :END:

    Nobody likes to have to type out the full yes or no when Emacs
    asks. Which it does often. Make it one character.
    #+begin_src emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src
*** Key bindings
    :PROPERTIES:
    :CUSTOM_ID: key-bindings
    :END:

    Miscellaneous key binding stuff that doesn't fit anywhere else.
    #+begin_src emacs-lisp
      (global-set-key (kbd "RET") 'newline-and-indent)
      (global-set-key (kbd "C-;") 'comment-or-uncomment-region)
      (global-set-key (kbd "M-/") 'hippie-expand)
      (global-set-key (kbd "C-+") 'text-scale-increase)
      (global-set-key (kbd "C--") 'text-scale-decrease)
      (global-set-key (kbd "C-c C-k") 'compile)
      (global-set-key (kbd "C-x g") 'magit-status)
    #+end_src
*** Vendor directory
    :PROPERTIES:
    :CUSTOM_ID: vendor-directory
    :END:

    I have a couple of things that don't come from package
    managers. This includes the directory for use.
    #+begin_src emacs-lisp
      (defvar ashfaq/vendor-dir (expand-file-name "vendor" user-emacs-directory))
      (add-to-list 'load-path ashfaq/vendor-dir)

      (dolist (project (directory-files ashfaq/vendor-dir t "\\w+"))
        (when (file-directory-p project)
          (add-to-list 'load-path project)))
    #+end_src
*** Misc
    :PROPERTIES:
    :CUSTOM_ID: misc
    :END:

    Turn down the time to echo keystrokes so I don't have to wait
    around for things to happen. Dialog boxes are also a bit annoying,
    so just have Emacs use the echo area for everything. Beeping is
    for robots, and I am not a robot. Use a visual indicator instead
    of making horrible noises. Oh, and always highlight parentheses. A
    person could go insane without that.
    #+begin_src emacs-lisp
      (setq echo-keystrokes 0.1
            use-dialog-box nil
            visible-bell t)
      (show-paren-mode t)
    #+end_src
*** Evil Mode
    :PROPERTIES:
    :CUSTOM_ID: evil-mode
    :END:
   
    #+begin_src emacs-lisp
     (evil-mode 1)
    #+end_src

** Org
   :PROPERTIES:
   :CUSTOM_ID: org-mode
   :END:
   =org-mode= is one of the most powerful and amazing features of
   Emacs. I mostly use it for task/day organization and generating
   code snippets in HTML. Just a few tweaks here to make the
   experience better.
*** Settings
   :PROPERTIES:
   :CUSTOM_ID: org-mode-settings
   :END:
   Enable logging when tasks are complete. This puts a time-stamp on
   the completed task. Since I usually am doing quite a few things at
   once, I added the =INPROGRESS= keyword and made the color
   blue. Finally, enable =flyspell-mode= and =writegood-mode= when
   =org-mode= is active.
   #+begin_src emacs-lisp
     (setq org-log-done t
           org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
           org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold))))
     (add-hook 'org-mode-hook
               (lambda ()
                 (flyspell-mode)))
     (add-hook 'org-mode-hook
               (lambda ()
                 (writegood-mode)))
   #+end_src

*** org-babel
   :PROPERTIES:
   :CUSTOM_ID: org-babel
   :END:
    =org-babel= is a feature inside of =org-mode= that makes this
    document possible. It allows for embedding languages inside of an
    =org-mode= document with all the proper font-locking. It also
    allows you to extract and execute code. It isn't aware of
    =Clojure= by default, so the following sets that up.
    #+begin_src emacs-lisp
            (require 'ob)

            (org-babel-do-load-languages
             'org-babel-load-languages
             '((sh . t)
               (dot . t)
               (ruby . t)
               (js . t)
               (C . t)
               (scala . t)))

            (add-to-list 'org-src-lang-modes (quote ("dot". graphviz-dot)))
            (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))

            (defvar org-babel-default-header-args:clojure
              '((:results . "silent") (:tangle . "yes")))

            (defun org-babel-execute:clojure (body params)
              (lisp-eval-string body)
              "Done!")

            (provide 'ob-clojure)

            (setq org-src-fontify-natively t
                  org-confirm-babel-evaluate nil)

            (add-hook 'org-babel-after-execute-hook (lambda ()
                                                      (condition-case nil
                                                          (org-display-inline-images)
                                                        (error nil)))
                      'append)
    #+end_src
*** org-abbrev
    :PROPERTIES:
    :CUSTOM_ID: org-abbrev
    :END:
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))

      (define-skeleton skel-org-block-elisp
        "Insert an emacs-lisp block"
        ""
        "#+begin_src emacs-lisp\n"
        _ - \n
        "#+end_src\n")

      (define-abbrev org-mode-abbrev-table "elsrc" "" 'skel-org-block-elisp)

      (define-skeleton skel-org-block-js
        "Insert a JavaScript block"
        ""
        "#+begin_src js\n"
        _ - \n
        "#+end_src\n")

      (define-abbrev org-mode-abbrev-table "jssrc" "" 'skel-org-block-js)

      (define-skeleton skel-header-block
        "Creates my default header"
        ""
        "#+TITLE: " str "\n"
        "#+AUTHOR: Ashfaq Farooqui\n"
        "#+EMAIL: ashfaq.farooqui@gmail.com\n"
        "#+OPTIONS: toc:3 num:nil\n"
        "#+STYLE: <link rel=\"stylesheet\" type=\"text/css\" href=\"http://thomasf.github.io/solarized-css/solarized-light.min.css\" />\n")

      (define-abbrev org-mode-abbrev-table "sheader" "" 'skel-header-block)

      (define-skeleton skel-org-html-file-name
        "Insert an HTML snippet to reference the file by name"
        ""
        "#+HTML: <strong><i>"str"</i></strong>")

      (define-abbrev org-mode-abbrev-table "fname" "" 'skel-org-html-file-name)

      (define-skeleton skel-ngx-config
        "Template for NGINX module config file"
        ""
        "ngx_addon_name=ngx_http_" str  "_module\n"
        "HTTP_MODULES=\"$HTTP_MODULES ngx_http_" str "_module\"\n"
        "NGX_ADDON_SRCS=\"$NGX_ADDON_SRCS $ngx_addon_dir/ngx_http_" str "_module.c\"")

      (define-abbrev fundamental-mode-abbrev-table "ngxcnf" "" 'skel-ngx-config)

      (define-skeleton skel-ngx-module
        "Template for NGINX modules"
        ""
        "#include <nginx.h>\n"
        "#include <ngx_config.h>\n"
        "#include <ngx_core.h>\n"
        "#include <ngx_http.h>\n\n"

        "ngx_module_t ngx_http_" str "_module;\n\n"

        "static ngx_int_t\n"
        "ngx_http_" str "_handler(ngx_http_request_t *r)\n"
        "{\n"
        >"if (r->main->internal) {\n"
        >"return NGX_DECLINED;\n"
        "}" > \n
        \n
        >"ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, \"My new module\");\n\n"
        > _ \n
        >"return NGX_OK;\n"
        "}" > "\n\n"

        "static ngx_int_t\n"
        "ngx_http_"str"_init(ngx_conf_t *cf)\n"
        "{\n"
        >"ngx_http_handler_pt *h;\n"
        >"ngx_http_core_main_conf_t *cmcf;\n\n"

        >"cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);\n"
        >"h = ngx_array_push(&cmcf->phases[NGX_HTTP_ACCESS_PHASE].handlers);\n\n"

        >"if (h == NULL) {\n"
        >"return NGX_ERROR;\n"
        "}" > \n
        \n
        >"*h = ngx_http_"str"_handler;\n\n"

        >"return NGX_OK;\n"
        "}" > \n
        \n
        "static ngx_http_module_t ngx_http_"str"_module_ctx = {\n"
        >"NULL,                 /* preconfiguration */\n"
        >"ngx_http_"str"_init,  /* postconfiguration */\n"
        >"NULL,                 /* create main configuration */\n"
        >"NULL,                 /* init main configuration */\n"
        >"NULL,                 /* create server configuration */\n"
        >"NULL,                 /* merge server configuration */\n"
        >"NULL,                 /* create location configuration */\n"
        >"NULL                  /* merge location configuration */\n"
        "};" > \n
        \n

        "ngx_module_t ngx_http_"str"_module = {\n"
        >"NGX_MODULE_V1,\n"
        >"&ngx_http_"str"_module_ctx,  /* module context */\n"
        >"NULL,                        /* module directives */\n"
        >"NGX_HTTP_MODULE,             /* module type */\n"
        >"NULL,                        /* init master */\n"
        >"NULL,                        /* init module */\n"
        >"NULL,                        /* init process */\n"
        >"NULL,                        /* init thread */\n"
        >"NULL,                        /* exit thread */\n"
        >"NULL,                        /* exit process */\n"
        >"NULL,                        /* exit master */\n"
        >"NGX_MODULE_V1_PADDING\n"
        "};" >)

      (require 'cc-mode)
      (define-abbrev c-mode-abbrev-table "ngxmod" "" 'skel-ngx-module)

      (define-skeleton skel-ngx-append-header
        "Template for header appending function for NGINX modules"
        ""
        "static void append_header(ngx_http_request_t *r)\n"
        "{\n"
        > "ngx_table_elt_t *h;\n"
        > "h = ngx_list_push(&r->headers_out.headers);\n"
        > "h->hash = 1;\n"
        > "ngx_str_set(&h->key, \"X-NGINX-Hello\");\n"
        > "ngx_str_set(&h->value, \"Hello NGINX!\");\n"
        "}\n")

      (define-abbrev c-mode-abbrev-table "ngxhdr" "" 'skel-ngx-append-header)
    #+end_src
*** exporting
Make sure we use another folder to export files, we do not want orgs
folder too cluttered.
#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
  '(("html"
     :base-directory "./"
     :base-extension "org"
     :publishing-directory "./exports"
     :publishing-function org-publish-org-to-html)
    ("pdf"
     :base-directory "./"
     :base-extension "org"
     :publishing-directory "./exports"
     :publishing-function org-publish-org-to-pdf)
    ("all" :components ("html" "pdf"))))

#+END_SRC
** Utilities


*** Smex
    =smex= is a necessity. It provides history and searching on top of =M-x=.
    #+begin_src emacs-lisp
      (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
      (smex-initialize)
      (global-set-key (kbd "M-x") 'smex)
      (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    #+end_src
*** Ido
    =Ido= mode provides a nice way to navigate the filesystem. This is
    mostly just turning it on.
    #+begin_src emacs-lisp
      (ido-mode t)
      (setq ido-enable-flex-matching t
            ido-use-virtual-buffers t)
    #+end_src
*** Column number mode
    Turn on column numbers.
    #+begin_src emacs-lisp
      (setq column-number-mode t)
    #+end_src
*** Temporary file management
    Deal with temporary files. I don't care about them and this makes
    them go away.
    #+begin_src emacs-lisp
      (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
      (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
    #+end_src
*** autopair-mode
    This makes sure that brace structures =(), [], {}=, etc. are closed
    as soon as the opening character is typed.
    #+begin_src emacs-lisp
      (require 'autopair)
    #+end_src
*** auto-complete
    Turn on auto complete.
    #+begin_src emacs-lisp
      (require 'auto-complete-config)
      (ac-config-default)
    #+end_src
*** Indentation and buffer cleanup
    This re-indents, untabifies, and cleans up whitespace. It is stolen
    directly from the emacs-starter-kit.
    #+begin_src emacs-lisp
      (defun untabify-buffer ()
        (interactive)
        (untabify (point-min) (point-max)))

      (defun indent-buffer ()
        (interactive)
        (indent-region (point-min) (point-max)))

      (defun cleanup-buffer ()
        "Perform a bunch of operations on the whitespace content of a buffer."
        (interactive)
        (indent-buffer)
        (untabify-buffer)
        (delete-trailing-whitespace))

      (defun cleanup-region (beg end)
        "Remove tmux artifacts from region."
        (interactive "r")
        (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
          (replace-regexp re "" nil beg end)))

      (global-set-key (kbd "C-x M-t") 'cleanup-region)
      (global-set-key (kbd "C-c n") 'cleanup-buffer)

      (setq-default show-trailing-whitespace t)
    #+end_src
*** flyspell
    The built-in Emacs spell checker. Turn off the welcome flag because
    it is annoying and breaks on quite a few systems. Specify the
    location of the spell check program so it loads properly.
    #+begin_src emacs-lisp
      (setq flyspell-issue-welcome-flag nil)
      (if (eq system-type 'darwin)
          (setq-default ispell-program-name "/usr/local/bin/aspell")
        (setq-default ispell-program-name "/usr/bin/aspell"))
      (setq-default ispell-list-command "list")
    #+end_src
*** eshell
    Customize eshell
    #+begin_src emacs-lisp
      (require 'f)

      (setq eshell-visual-commands
            '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))

      (setq eshell-visual-subcommands
            '(("git" "log" "l" "diff" "show")))

      ;; Prompt with a bit of help from http://www.emacswiki.org/emacs/EshellPrompt
      (defmacro with-face (str &rest properties)
        `(propertize ,str 'face (list ,@properties)))

      (defun eshell/abbr-pwd ()
        (let ((home (getenv "HOME"))
              (path (eshell/pwd)))
          (cond
           ((string-equal home path) "~")
           ((f-ancestor-of? home path) (concat "~/" (f-relative path home)))
           (path))))

      (defun eshell/my-prompt ()
        (let ((header-bg "#161616"))
          (concat
      ;     (with-face user-login-name :foreground "#dc322f")
      ;     (with-face (concat "@" hostname) :foreground "#268bd2")
      ;     " "
           (with-face (eshell/abbr-pwd) :foreground "#008700")
           (if (= (user-uid) 0)
               (with-face "#" :foreground "red")
             (with-face "$" :foreground "#2345ba"))
           " ")))

      (setq eshell-prompt-function 'eshell/my-prompt)
      (setq eshell-highlight-prompt nil)
      (setq eshell-prompt-regexp "^[^#$\n]+[#$] ")

      (setq eshell-cmpl-cycle-completions nil)
    #+end_src
*** powerline
#+begin_src emacs-lisp
  (require 'powerline)
  (powerline-default-theme)
#+end_src

** Language Hooks
   :PROPERTIES:
   :CUSTOM_ID: languages
   :END:
*** shell-script-mode
    :PROPERTIES:
    :CUSTOM_ID: shell-script-mode
    :END:
    Use =shell-script-mode= for =.zsh= files.
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.zsh$" . shell-script-mode))
    #+end_src
*** conf-mode
    :PROPERTIES:
    :CUSTOM_ID: conf-mode
    :END:
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.gitconfig$" . conf-mode))
    #+end_src
*** Web Mode
    :PROPERTIES:
    :CUSTOM_ID: web-mode
    :END:

    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.hbs$" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb$" . web-mode))
    #+end_src

*** YAML
    Add additional file extensions that trigger =yaml-mode=.
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
      (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
    #+end_src
*** CoffeeScript Mode
    The default CoffeeScript mode makes terrible choices. This turns
    everything into 2 space indentations and makes it so the mode
    functions rather than causing you indentation errors every time you
    modify a file.
    #+begin_src emacs-lisp
      (defun coffee-custom ()
        "coffee-mode-hook"
        (make-local-variable 'tab-width)
        (set 'tab-width 2))

      (add-hook 'coffee-mode-hook 'coffee-custom)
    #+end_src
*** JavaScript Mode
    =js-mode= defaults to using 4 spaces for indentation. Change it to 2
    #+begin_src emacs-lisp
      (defun js-custom ()
        "js-mode-hook"
        (setq js-indent-level 2))

      (add-hook 'js-mode-hook 'js-custom)
    #+end_src
*** Markdown Mode
    Enable Markdown mode and setup additional file extensions. Use
    pandoc to generate HTML previews from within the mode, and use a
    custom css file to make it a little prettier.
    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
      (add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
      (add-hook 'markdown-mode-hook
                (lambda ()
                  (visual-line-mode t)
                  (writegood-mode t)
                  (flyspell-mode t)))
      (setq markdown-command "pandoc --smart -f markdown -t html")
      (setq markdown-css-paths `(,(expand-file-name "markdown.css" ashfaq/vendor-dir)))
    #+end_src
*** Idris Mode
    #+begin_src emacs-lisp
      (setq idris-interpreter-path "/usr/local/bin/idris")
    #+end_src 
*** Color Codes
    Running things like RSpec in compilation mode produces ansi color
    codes that aren't properly dealt with by default. This takes care
    of that and makes sure that the colors that are trying to be
    presented are rendered correctly.
    #+begin_src emacs-lisp
      (require 'ansi-color)
      (defun colorize-compilation-buffer ()
        (toggle-read-only)
        (ansi-color-apply-on-region (point-min) (point-max))
        (toggle-read-only))
      (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src
*** Find files
    Configure tools to find and replace
    #+begin_src emacs-lisp
      (autoload 'findr "findr" "Find file name." t)
      (define-key global-map [(meta control F)] 'findr)

      (autoload 'findr-search "findr" "Find text in files." t)
      (define-key global-map [(meta control f)] 'findr-search)

      (autoload 'findr-query-replace "findr" "Replace text in files." t)
      (define-key global-map [(meta control r)] 'findr-query-replace)
    #+end_src
*** Scala 
    Setup configuration for scala mode and add hook to run ensime within scala-mode
    #+begin_src emacs-lisp
      (require 'ensime)
      ;; Start ensime mode whenever we open scala mode, e.g. open a .scala file
      (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
      ;; Start ensime with Super-e
      (global-set-key (kbd "C-c C-c c") 'ensime)
      ;; Configuration for ensime
      (setq ensime-sem-high-faces
        '(
           (implicitConversion nil)
           (var . (:foreground "#ff2222"))
           (val . (:foreground "#dddddd"))
           (varField . (:foreground "#ff3333"))
           (valField . (:foreground "#dddddd"))
           (functionCall . (:foreground "#dc9157"))
           (param . (:foreground "#ffffff"))
           (object . (:foreground "#D884E3"))
           (class . (:foreground "green"))
           (trait . (:foreground "#009933")) ;; "#084EA8")) 
           (operator . (:foreground "#cc7832"))
           (object . (:foreground "#6897bb" :slant italic))
           (package . (:foreground "yellow"))
           (implicitConversion . (:underline (:style wave :color "blue")))
           (implicitParams . (:underline (:style wave :color "blue")))
           (deprecated . (:strike-through "#a9b7c6"))
           (implicitParams nil)
         )
        ;; ensime-completion-style 'company
        ;; ensime-sem-high-enabled-p nil ;; disable semantic highlighting
        ensime-tooltip-hints t ;; disable type-inspecting tooltips
        ensime-tooltip-type-hints t ;; disable typeinspecting tooltips
    )
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (setq ido-use-filename-at-point 'guess)
    (setq ido-create-new-buffer 'always)
    (setq ido-file-extensions-order '(".scala" ".org" ".txt" ".py" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf"))

    #+end_src

*** Neo tree
    #+begin_src emacs-lisp
      (require 'neotree)
      (global-set-key (kbd "s-d") 'neotree-toggle)
    #+end_src
** Look and feel
:PROPERTIES:
:CUSTOM_ID: Look and feel
:END:

*** Theme
*** ORG Mode beautification
:PROPERTIES:
:CUSTOM_ID: Org mode looks
:END:

**** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

When I'm starting an org capture template I'd like to begin in insert mode. I'm
opening it up in order to start typing something, so this skips a step.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC

** Exporting

Allow export to markdown and beamer (for presentations).

#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+END_SRC

Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (dot . t)
     (gnuplot . t)))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Associate the "dot" language with the =graphviz-dot= major mode.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

**** Exporting to HTML

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

Include the =minted= package in all of my LaTeX exports.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

**** Exporting projects

** TeX configuration

I rarely write LaTeX directly any more, but I often export through it with
org-mode, so I'm keeping them together.

Automatically parse the file after loading it.

#+BEGIN_SRC emacs-lisp
  (setq TeX-parse-self t)
#+END_SRC

Always use =pdflatex= when compiling LaTeX documents. I don't really have any
use for DVIs.

#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
#+END_SRC

Enable a minor mode for dealing with math (it adds a few useful keybindings),
and always treat the current file as the "main" file. That's intentional, since
I'm usually actually in an org document.

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (setq TeX-master t)))
#+END_SRC

** Editing with Markdown

Because I can't always use =org=.

I'd like spell-checking running when editing Markdown.

#+BEGIN_SRC emacs-lisp
  (add-hook 'gfm-mode-hook 'flyspell-mode)
#+END_SRC



Use =pandoc= to render the results.

#+BEGIN_SRC emacs-lisp
  (setq markdown-command "pandoc --standalone --mathjax --from=markdown")
#+END_SRC

** Wrap paragraphs automatically

=AutoFillMode= automatically wraps paragraphs, kinda like hitting =M-q=. I wrap
a lot of paragraphs, so this automatically wraps 'em when I'm writing text,
Markdown, or Org.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'gfm-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

Sometimes, though, I don't wanna wrap text. This toggles wrapping with =C-c q=:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c q") 'auto-fill-mode)
#+END_SRC

** Linting prose

I use [[http://proselint.com/][proselint]] to check my prose for common errors. This creates a flycheck
checker that runs proselint in texty buffers and displays my errors.

#+BEGIN_SRC emacs-lisp
  (require 'flycheck)

  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))

  (add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

Use flycheck in the appropriate buffers:

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook #'flycheck-mode)
  (add-hook 'gfm-mode-hook #'flycheck-mode)
  (add-hook 'text-mode-hook #'flycheck-mode)
  (add-hook 'org-mode-hook #'flycheck-mode)
#+END_SRC

** Enable region case modification

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC


** Mass editing of =grep= results

I like the idea of mass editing =grep= results the same way I can edit filenames
in =dired=. These keybindings allow me to use =C-x C-q= to start editing =grep=
results and =C-c C-c= to stop, just like in =dired=.

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'grep
    '(define-key grep-mode-map
      (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode))

  (eval-after-load 'wgrep
    '(define-key grep-mode-map
      (kbd "C-c C-c") 'wgrep-finish-edit))

  (setq wgrep-auto-save-buffer t)
#+END_SRC

** Use projectile everywhere

#+BEGIN_SRC emacs-lisp
 (add-hook 'scala-mode-hook 'projectile-mode) 
#+END_SRC

** Add a bunch of engines for =engine-mode=

Enable [[https://github.com/hrs/engine-mode][engine-mode]] and define a few useful engines.

#+BEGIN_SRC emacs-lisp
  (require 'engine-mode)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (engine-mode t)
#+END_SRC
** Add guide key

#+begin_src emacs-lisp
  (setq guide-key/guide-key-sequence '("C-x"))
  (guide-key-mode 1)  ; Enable guide-key-mode
  (setq guide-key/highlight-command-regexp "rectangle")
  (setq guide-key/highlight-command-regexp
        '("rectangle"
         ("register" . font-lock-type-face)
          ("bookmark" . "hot pink")))
  (defun guide-key/my-hook-function-for-org-mode ()
  (guide-key/add-local-guide-key-sequence "C-c")
  (guide-key/add-local-guide-key-sequence "C-c C-x")
  (guide-key/add-local-highlight-command-regexp "org-"))
(add-hook 'org-mode-hook 'guide-key/my-hook-function-for-org-mode)
#+end_src

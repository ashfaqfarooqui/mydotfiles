#+TITLE: Ashfaq Farooqui's Emacs Configuration
#+AUTHOR: Ashfaq Farooqui
#+EMAIL: ashfaq.farooqui@gmail.com
#+OPTIONS: toc:3 num:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

* User Details
   #+begin_src emacs-lisp
     (setq user-full-name "Ashfaq Farooqui")
     (setq user-mail-address "ashfaq.farooqui@gmail.com")
   #+end_src
* Package Management
   Since Emacs 24, Emacs includes the Emacs Lisp Package Archive
   ([[http://www.emacswiki.org/emacs/ELPA][ELPA]]) by default. This provides a nice way to install additional
   packages. Since the default package archive doesn't include
   everything necessary, the [[http://marmalade-repo.org/][marmalade]], and [[http://melpa.milkbox.net/#][melpa]] repositories are also
   added.
   #+begin_src emacs-lisp
     (load "package")
    (package-initialize)
    (add-to-list 'package-archives
                 '("marmalade" . "http://marmalade-repo.org/packages/"))
    (add-to-list 'package-archives
                 '("melpa" . "http://melpa.milkbox.net/packages/") t)
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
    (add-to-list 'package-archives
                '("elpy" . "http://jorgenschaefer.github.io/packages/"))
    (setq package-archive-enable-alist '(("melpa" magit f)))
    (require 'cl)
  #+end_src
** Define default packages
#+BEGIN_SRC emacs-lisp
(defvar ashfaq/packages '(ac-slime
 auto-complete
 graphviz-dot-mode
 magit
 org
 flycheck
 flyspell
 flyspell-correct
 flyspell-correct-helm
 helm-flyspell
 powerline
 helm
 helm-projectile
 ensime
 multiple-cursors
 find-file-in-repository
 yasnippet
 neotree
 rainbow-delimiters
 projectile
 evil
 org-bullets
 bind-key
 zenburn-theme
 writeroom-mode;;darkroom
 which-key
 elpy
 latex-preview-pane
 org-ref
 pdf-tools
 auctex
 auctex-latexmk
 )
 "Default packages")

#+END_SRC
** Install default packages

    When Emacs boots, check to make sure all of the packages defined
    in =ashfaq/packages= are installed. If not, have ELPA take care of
    it.
    #+begin_src emacs-lisp
      (defun ashfaq/packages-installed-p ()
        (loop for pkg in ashfaq/packages
              when (not (package-installed-p pkg)) do (return nil)
              finally (return t)))

      (unless (ashfaq/packages-installed-p)
        (message "%s" "Refreshing package database...")
        (package-refresh-contents)
        (dolist (pkg ashfaq/packages)
          (when (not (package-installed-p pkg))
            (package-install pkg))))
    #+end_src
* Load secrets
#+BEGIN_SRC emacs-lisp

  (require 'secrets "~/.emacs.d/secrets.gpg")
#+END_SRC
* Some mandatory stuff
** Splash Screen

    I want to skip straight to the scratch buffer. This turns off the
    splash screen and puts me straight into the scratch buffer. I
    don't really care to have anything in there either, so turn off
    the message while we're at it. Since I end up using =org-mode=
    most of the time, set the default mode accordingly.

    #+begin_src emacs-lisp
      (setq inhibit-splash-screen t
            initial-scratch-message nil
            initial-major-mode 'org-mode)
    #+end_src
** Scroll bar, Tool bar, Menu bar
    Emacs starts up with way too much enabled. Configure the scroll bar,
    menu bar, and tool bar. There isn't really a reason to have them
    on.
    #+begin_src emacs-lisp
      (scroll-bar-mode 1)
      (tool-bar-mode -1)
      (menu-bar-mode 1)
    #+end_src
** Marking text
    There are some behaviors in Emacs that aren't intuitive. Since I
    pair with others that don't know how Emacs handles highlighting,
    treat regions like other text editors. This means typing when the
    mark is active will write over the marked region. Also, make the
    common highlighting keystrokes work the way most people expect
    them to. This saves a lot of time explaining how to highlight
    areas of text. Emacs also has it's own clipboard and doesn't
    respond to the system clipboard by default, so tell Emacs that
    we're all friends and can get along.
    #+begin_src emacs-lisp
      (delete-selection-mode t)
      (transient-mark-mode t)
      (setq x-select-enable-clipboard t)
    #+end_src
** Display Settings
    I have some modifications to the default display. First, a
    minor tweak to the frame title. It's also nice to be able to see
    when a file actually ends. This will put empty line markers into
    the left hand side.
    #+begin_src emacs-lisp
      (setq-default indicate-empty-lines t)
      (when (not indicate-empty-lines)
        (toggle-indicate-empty-lines))
    #+end_src
** Indentation
There's nothing I dislike more than tabs in my files. Make sure I
don't share that discomfort with others.
#+begin_src emacs-lisp
   (setq tab-width 4
         indent-tabs-mode nil)
#+end_src
** Backup files
    Some people like to have them. I don't. Rather than pushing them
    to a folder, never to be used, just turn the whole thing off.
    #+begin_src emacs-lisp
      (setq make-backup-files nil)
   #+end_src
** Yes and No
    Nobody likes to have to type out the full yes or no when Emacs
    asks. Which it does often. Make it one character.
    #+begin_src emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src
** Key bindings
    Miscellaneous key binding stuff that doesn't fit anywhere else.
#+begin_src emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-c C-k") 'compile)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "S-z") 'undo)
(global-set-key (kbd "M-g") 'goto-line) ; [Ctrl-l]
(global-set-key (kbd "C-L") 'recenter-top-bottom)
(global-set-key [f2] 'split-window-horizontally)
(global-set-key [f1] 'remove-split)
(global-set-key (kbd "C-x 9") 'split-window-horizontally)
(global-set-key (kbd "s--") 'split-window-vertically)
(global-set-key (kbd "s-+") 'remove-split)
(global-set-key (kbd "s-<up>") 'enlarge-window)
(global-set-key (kbd "s-<down>") 'shrink-window)
(global-set-key (kbd "s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "M-k") 'kill-whole-line)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

#+end_src
** Misc
    Turn down the time to echo keystrokes so I don't have to wait
    around for things to happen. Dialog boxes are also a bit annoying,
    so just have Emacs use the echo area for everything. Beeping is
    for robots, and I am not a robot. Use a visual indicator instead
    of making horrible noises. Oh, and always highlight parentheses. A
    person could go insane without that.
    #+begin_src emacs-lisp
      (setq echo-keystrokes 0.1
            use-dialog-box nil
            visible-bell t)
      (show-paren-mode t)
    #+end_src
** Evil Mode
#+begin_src emacs-lisp
     (use-package evil
  :ensure t
  :config
  (evil-mode 1)

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

  (use-package evil-indent-textobject
    :ensure t)
#+end_src
* Utilities
** Helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(global-set-key (kbd "M-x") 'helm-M-x)
(helm-mode 1)
#+END_SRC
** Ido
    =Ido= mode provides a nice way to navigate the filesystem. This is
    mostly just turning it on.
    #+begin_src emacs-lisp
      (ido-mode t)
      (setq ido-enable-flex-matching t
            ido-use-virtual-buffers t)
    #+end_src
** Column number mode
    Turn on column numbers.
    #+begin_src emacs-lisp
      (setq column-number-mode t)
    #+end_src
** Temporary file management
    Deal with temporary files. I don't care about them and this makes
    them go away.
    #+begin_src emacs-lisp
      (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
      (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
    #+end_src
** autopair-mode
    This makes sure that brace structures =(), [], {}=, etc. are closed
    as soon as the opening character is typed.
    #+begin_src emacs-lisp
      (require 'autopair)
      (autopair-global-mode)
    #+end_src
** Company mode
#+BEGIN_SRC emacs-lisp

(add-to-list 'exec-path "/usr/local/bin")

(use-package company
  :ensure t
  :diminish company-mode
  :commands company-mode
  :init
  (setq
   company-dabbrev-ignore-case nil
   company-dabbrev-code-ignore-case nil
   company-dabbrev-downcase nil
   company-idle-delay 0
   company-minimum-prefix-length 4)
  :config
  ;; disables TAB in company-mode, freeing it for yasnippet
  (define-key company-active-map [tab] nil)
  (define-key company-active-map (kbd "TAB") nil))


(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
** Indentation and buffer cleanup
Setup org mode indentation
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)

#+END_SRC
    This re-indents, untabifies, and cleans up whitespace. It is stolen
    directly from the emacs-starter-kit.
    #+begin_src emacs-lisp
      (defun untabify-buffer ()
        (interactive)
        (untabify (point-min) (point-max)))

      (defun indent-buffer ()
        (interactive)
        (indent-region (point-min) (point-max)))

      (defun cleanup-buffer ()
        "Perform a bunch of operations on the whitespace content of a buffer."
        (interactive)
        (indent-buffer)
        (untabify-buffer)
        (delete-trailing-whitespace))

      (defun cleanup-region (beg end)
        "Remove tmux artifacts from region."
        (interactive "r")
        (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
          (replace-regexp re "" nil beg end)))

      (global-set-key (kbd "C-x M-t") 'cleanup-region)
      (global-set-key (kbd "C-c n") 'cleanup-buffer)

      (setq-default show-trailing-whitespace t)
    #+end_src

    Indent stuff, copied from [[https://www.emacswiki.org/emacs/IndentingText]]
#+BEGIN_SRC lisp-emacs

(defun shift-region (distance)
  (let ((mark (mark)))
    (save-excursion
      (indent-rigidly (region-beginning) (region-end) distance)
      (push-mark mark t t)
      ;; Tell the command loop not to deactivate the mark
      ;; for transient mark mode
      (setq deactivate-mark nil))))

(defun shift-right ()
  (interactive)
  (shift-region 1))

(defun shift-left ()
  (interactive)
  (shift-region -1))

;; Bind (shift-right) and (shift-left) function to your favorite keys. I use
;; the following so that Ctrl-Shift-Right Arrow moves selected text one
;; column to the right, Ctrl-Shift-Left Arrow moves selected text one
;; column to the left:

(global-set-key [C-S-right] 'shift-right)
(global-set-key [C-S-left] 'shift-left)
    #+END_SRC
** flyspell
    The built-in Emacs spell checker. Turn off the welcome flag because
    it is annoying and breaks on quite a few systems. Specify the
    location of the spell check program so it loads properly.
    #+begin_src emacs-lisp
      (setq flyspell-issue-welcome-flag nil)
          (setq-default ispell-program-name "/usr/local/bin/aspell")
        (setq-default ispell-program-name "/usr/bin/aspell")
      (setq-default ispell-list-command "list")
    #+end_src
** eshell
    Customize eshell

    #+begin_src emacs-lisp
      (require 'f)

      (setq eshell-visual-commands
            '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))

      (setq eshell-visual-subcommands
            '(("git" "log" "l" "diff" "show")))

      ;; Prompt with a bit of help from http://www.emacswiki.org/emacs/EshellPrompt
      (defmacro with-face (str &rest properties)
        `(propertize ,str 'face (list ,@properties)))

      (defun eshell/abbr-pwd ()
        (let ((home (getenv "HOME"))
              (path (eshell/pwd)))
          (cond
           ((string-equal home path) "~")
           ((f-ancestor-of? home path) (concat "~/" (f-relative path home)))
           (path))))

      (defun eshell/my-prompt ()
        (let ((header-bg "#161616"))
          (concat
      ;     (with-face user-login-name :foreground "#dc322f")
      ;     (with-face (concat "@" hostname) :foreground "#268bd2")
      ;     " "
           (with-face (eshell/abbr-pwd) :foreground "#008700")
           (if (= (user-uid) 0)
               (with-face "#" :foreground "red")
             (with-face "$" :foreground "#2345ba"))
           " ")))

      (setq eshell-prompt-function 'eshell/my-prompt)
      (setq eshell-highlight-prompt nil)
      (setq eshell-prompt-regexp "^[^#$\n]+[#$] ")

      (setq eshell-cmpl-cycle-completions nil)
    #+end_src
** powerline

#+begin_src emacs-lisp
  (require 'powerline)
  (powerline-default-theme)
#+end_src

** Neo tree
#+begin_src emacs-lisp
      (require 'neotree)
      (global-set-key [f8] 'neotree-toggle)
    (setq neo-smart-open t)
  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))

 (global-set-key [f8] 'neotree-project-dir)

(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+end_src

** Peep files using dired
#+BEGIN_SRC emacs-lisp
  ;;preview files in dired
  (use-package peep-dired
    :ensure t
    :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
    :bind (:map dired-mode-map
                ("P" . peep-dired)))
  (evil-define-key 'normal peep-dired-mode-map (kbd "<SPC>") 'peep-dired-scroll-page-down
                                               (kbd "C-<SPC>") 'peep-dired-scroll-page-up
                                               (kbd "<backspace>") 'peep-dired-scroll-page-up
                                               (kbd "j") 'peep-dired-next-file
                                               (kbd "k") 'peep-dired-prev-file)
  (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC
** Volatile highlight
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :config
  (volatile-highlights-mode t))
#+END_SRC
* Setup scala and ensime
** Ensime
#+BEGIN_SRC emacs-lisp
      (require 'ensime)
      ;; Start ensime mode whenever we open scala mode, e.g. open a .scala file
      (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
      ;; Start ensime with Super-e
      (global-set-key (kbd "C-c C-c c") 'ensime)
      ;; Configuration for ensime
      (setq ensime-sem-high-faces
        '(
           (implicitConversion nil)
           (var . (:foreground "#ff2222"))
           (val . (:foreground "#dddddd"))
           (varField . (:foreground "#ff3333"))
           (valField . (:foreground "#dddddd"))
           (functionCall . (:foreground "#dc9157"))
           (param . (:foreground "#ffffff"))
           (object . (:foreground "#D884E3"))
           (class . (:foreground "green"))
           (trait . (:foreground "#009933"))
           (operator . (:foreground "#cc7832"))
           (object . (:foreground "#6897bb" :slant italic))
           (package . (:foreground "yellow"))
           (implicitConversion . (:underline (:style wave :color "blue")))
           (implicitParams . (:underline (:style wave :color "blue")))
           (deprecated . (:strike-through "#a9b7c6"))
           (implicitParams nil)
         )
        ensime-completion-style 'company
        ensime-sem-high-enabled-p nil ;; disable semantic highlighting
        ensime-tooltip-hints t ;; disable type-inspecting tooltips
        ensime-tooltip-type-hints t ;; disable typeinspecting tooltips
    )
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (setq ido-use-filename-at-point 'guess)
    (setq ido-create-new-buffer 'always)
    (setq ido-file-extensions-order '(".scala" ".org" ".txt" ".py" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf"))

#+END_SRC
** Navigation stuff
#+BEGIN_SRC emacs-lisp

(defun search-to-brace ()
  "Jump to the next open brace"
  (interactive)
  (search-forward "{"))
(define-key global-map (kbd "M-s {") 'search-to-brace)

(defun search-to-prev-brace ()
    "Jump to the previous brace"
    (interactive)
    (search-backward "{"))
(define-key global-map (kbd "M-S {") 'search-to-prev-brace)

(defun search-to-close-brace ()
  "Jump to the next close brace"
  (interactive)
  (search-forward "}"))
(define-key global-map (kbd "M-s }") 'search-to-close-brace)

(defun search-to-prev-close-brace ()
  "Jump to the previous close brace"
  (interactive)
  (search-backward "}"))
(define-key global-map (kbd "M-S }") 'search-to-prev-brace)

(defun search-to-next-def ()
  "Jump to the next def"
  (interactive)
  (search-forward "def "))
(define-key global-map (kbd "M-s d") 'search-to-next-def)

(defun search-to-prev-def ()
  "Jump to the previous def"
  (interactive)
  (search-backward "def "))
(define-key global-map (kbd "M-S d") 'search-to-prev-def)

;; Save on focus-out
(defun save-all ()
  (interactive)
  (save-some-buffers t))
(add-hook 'focus-out-hook 'save-all)
#+END_SRC

** SMart parenthesis
;;###+BEGIN_SRC emacs-lisp
;;##(use-package smartparens
;;##  :ensure t
;;##  :diminish smartparens-mode
;;##  :commands
;;##  smartparens-strict-mode
;;##  smartparens-mode
;;##  sp-restrict-to-pairs-interactive
;;##  sp-local-pair
;;##  :init
;;##  (setq sp-interactive-dwim t)
;;##  :config
;;##  (require 'smartparens-config)
;;##  (sp-use-smartparens-bindings)
;;##
;;##  (sp-pair "(" ")" :wrap "C-(") ;; how do people live without this?
;;##  (sp-pair "[" "]" :wrap "s-[") ;; C-[ sends ESC
;;##  (sp-pair "{" "}" :wrap "C-{")
;;##
;;##  ;; WORKAROUND https://github.com/Fuco1/smartparens/issues/543
;;##  (bind-key "C-<left>" nil smartparens-mode-map)
;;##  (bind-key "C-<right>" nil smartparens-mode-map)
;;##
;;##  (bind-key "s-<delete>" 'sp-kill-sexp smartparens-mode-map)
;;##  (bind-key "s-<backspace>" 'sp-backward-kill-sexp smartparens-mode-map))
;;##
;;##(sp-local-pair 'scala-mode "(" nil :post-handlers '(("||\n[i]" "RET")))
;;##(sp-local-pair 'scala-mode "{" nil :post-handlers '(("||\n[i]" "RET") ("| " "SPC")))
;;##
;;##(bind-key "s-{" 'sp-rewrap-sexp smartparens-mode-map)
;;###+END_SRC
** New line in comments
#+BEGIN_SRC emacs-lisp
(defun scala-mode-newline-comments ()
  "Custom newline appropriate for `scala-mode'."
  ;; shouldn't this be in a post-insert hook?
  (interactive)
  (newline-and-indent)
  (scala-indent:insert-asterisk-on-multiline-comment))

(bind-key "RET" 'scala-mode-newline-comments scala-mode-map)

(setq comment-start "/* "
          comment-end " */"
          comment-style 'multi-line
          comment-empty-lines t)



#+END_SRC
** TUrn them on
#+BEGIN_SRC emacs-lisp
(add-hook 'scala-mode-hook
          (lambda ()
            (show-paren-mode)
;            (smartparens-mode)
            (yas-minor-mode)
            (git-gutter-mode)
;            (company-mode)
            (ensime-mode)
            (scala-mode:goto-start-of-code)))



#+END_SRC
* Org
   =org-mode= is one of the most powerful and amazing features of
   Emacs. I mostly use it for task/day organization and generating
   code snippets in HTML. Just a few tweaks here to make the
   experience better.
** Directory setup
   Store my org files in =~/Dropbox/orgs=, define an index file and an
   archive of finished tasks in =archive.org=.

#+BEGIN_SRC emacs-lisp
 (setq org-directory "~/Dropbox/orgs")

 (defun org-file-path (filename)
   "Return the absolute address of an org file, given its relative name."
   (concat (file-name-as-directory org-directory) filename))

 (setq org-inbox-file
       (concat (org-file-path "inbox.org")))
 (setq org-index-file (org-file-path "index.org"))
 (setq org-archive-location
       (concat (org-file-path "archive.org") "::* From %s"))

#+END_SRC
** Settings
*** Sequences
Enable logging when tasks are complete. This puts a time-stamp on
   the completed task. Since I usually am doing quite a few things at
   once, I added the =INPROGRESS= keyword and made the color
   blue. Finally, enable =flyspell-mode= and =writegood-mode= when
   =org-mode= is active.
   #+begin_src emacs-lisp
             (setq org-todo-keywords '((sequence
                 "TODO(t)"  ; next action
                 "STARTED(s)"
                 "WAITING(w@/!)"
                 "SOMEDAY(.)" "|" "DONE(x!)" "CANCELLED(c@)")
                (sequence "TODELEGATE(-)" "DELEGATED(d)" "|" "COMPLETE(x)")
                 (sequence "IDEA"))
     org-todo-keyword-faces '(("IDEA" . (:foreground "green" :weight bold))
                                   ("STARTED" . (:foreground "blue" :weight bold))
                                   ("CANCELLED" . (:foreground "red" :weight book))
                                   ("SOMEDAY" . (:foreground "red" :weight book))
                                   ("WAITING" . (:foreground "yellow" :weight book))
                                   ("COMPLETE" . (:foreground "green" :weight bold))
                                   ("DONE" . (:foreground "green" :weight bold))))



               (setq org-log-done t)
                  (add-hook 'org-mode-hook
                            (lambda ()
                              (flyspell-mode)))
                  (add-hook 'org-mode-hook
                            (lambda ()
                              (writegood-mode)))
(add-hook 'LaTeX-mode-hook (lambda () (writegood-mode)))
   #+end_src
*** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
#+END_SRC

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

When I'm starting an org capture template I'd like to begin in insert mode. I'm
opening it up in order to start typing something, so this skips a step.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC

*** org-babel
   =org-babel= is a feature inside of =org-mode= that makes this
   document possible. It allows for embedding languages inside of an
   =org-mode= document with all the proper font-locking. It also
   allows you to extract and execute code. It isn't aware of
   =Clojure= by default, so the following sets that up.
   #+begin_src emacs-lisp
     (require 'ob)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((sh . t)
        (dot . t)
        (ruby . t)
        (js . t)
        (C . t)
        (ledger .t)
        (scala . t)))

     (add-to-list 'org-src-lang-modes (quote ("dot". graphviz-dot)))
     (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))

     (defvar org-babel-default-header-args:clojure
       '((:results . "silent") (:tangle . "yes")))

     (defun org-babel-execute:clojure (body params)
       (lisp-eval-string body)
       "Done!")

     (provide 'ob-clojure)

     (setq org-src-fontify-natively t
           org-confirm-babel-evaluate nil)

     (add-hook 'org-babel-after-execute-hook (lambda ()
                                               (condition-case nil
                                                   (org-display-inline-images)
                                                 (error nil)))
               'append)
   #+end_src
** org-agenda
Use all the files to derive agenda.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list org-directory))
  (setq org-agenda-include-diary t)
  (setq org-agenda-include-all-todo t)
#+END_SRC
*** Ending tasks
Mark a =TODO= as done using =C-c C-x C-s= and send to archive.
#+BEGIN_SRC emacs-lisp
(defun mark-done-and-archive ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo "DONE")
  (org-archive-subtree))

(define-key global-map "\C-c\C-x\C-s" 'mark-done-and-archive)
(setq org-log-done 'time)
#+END_SRC
*** Capturing tasks

Define a few common tasks as capture templates. Specifically, I frequently:

- Record ideas for future blog posts in =blog-ideas.org=,
- Record everything related to Phd stuff in =~/Phd Notebook.org=, and
- Maintain a todo list in =to-do.org=.
- Maintain a reading list in =to-read.org=

#+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
          '(("b" "Blog idea"
             entry
             (file (org-file-path "blog-ideas.org"))
             "* TODO %?\n")

            ("p" "Phd Notes"
             entry
             (file (org-file-path "Phd Notebook.org")))

            ("t" "Todo tasks"
             entry
             (file (org-file-path "to-do.org"))
             "* TODO %?\n")

            ("r" "Reading"
             checkitem
             (file (org-file-path "to-read.org")))

            ("R" "Random Notes"
             entry
             (file org-index-file)
             "* %?\n")))

 (setq ledger-expense-completions
       (list
        "" ;; needed for first | for mapconcat
        "Income:Salary"
        "Assets:Savings" "Assets:Checking"
        "Expenses:Dining" "Expenses:Groceries" "Expenses:Rent" "Expenses:Outfit:Apparel" "Expenses:Outfit:Accessories" "Expenses:Goods" "Expenses:Electronics:Gadgets" "Expenses:Phone" "Expenses:Tools" "Expenses:Transport" "Expenses:Entertainment"
        "Liabilities:ChalmersCard"
        ))


    (setq capture-expense-template
          "%%(org-read-date) * %%^{What}
        %%^{Expenses%s}  %%^{Amount}
        %%^{Assets%s}")

    (setq capture-income-template
          "%%(org-read-date) * Salary
        Assets:Checking  %%^{Amount}
        Income:Salary")

    (setq capture-credit-template
          "%%(org-read-date) * %%^{What}
        %%^{Expense%s}  %%^{Amount}
        Liabilities:ChalmersCard")

    (setq capture-transfer-template
          "%%(org-read-date) * %%^{What}
        %%^{Assets%s}  %%^{Amount}
        %%^{Assets%s}")
  
(defun return-capture-expense-template ()
    (let ((compstring
           (mapconcat 'identity ledger-expense-completions  "|" )))
  (format capture-expense-template compstring compstring)))

(defun return-capture-credit-template ()
    (let ((compstring
           (mapconcat 'identity ledger-expense-completions  "|" )))
  (format capture-credit-template compstring compstring))
  )
(defun return-capture-income-template ()
    (let ((compstring
           (mapconcat 'identity ledger-expense-completions  "|" )))
  (format capture-income-template compstring compstring))
  )
(defun return-capture-transfer-template ()
    (let ((compstring
           (mapconcat 'identity ledger-expense-completions  "|" )))
  (format capture-transfer-template compstring compstring))
  )

(setq org-capture-templates
        (append '(("l" "Ledger entries")
                  ("ls" "Spending" plain
                  (file "~/Dropbox/orgs/finances.ledger")
                  (function return-capture-expense-template)
                  :empty-lines-before 1
                  :empty-lines-after 1)
                  ("lc" "Credit" plain
                  (file "~/Dropbox/orgs/finances.ledger")
                  (function return-capture-credit-template)
                  :empty-lines-before 1
                  :empty-lines-after 1)
                  ("li" "Income" plain
                  (file "~/Dropbox/orgs/finances.ledger")
                  (function return-capture-income-template)
                  :empty-lines-before 1
                  :empty-lines-after 1)
                  ("lt" "Transfer" plain
                  (file "~/Dropbox/orgs/finances.ledger")
                  (function return-capture-transfer-template)
                  :empty-lines-before 1
                  :empty-lines-after 1)
)
org-capture-templates))


#+END_SRC

#+RESULTS:
| l  | Ledger entries |           |                                         |                                             |                     |   |                    |   |
| ls | Spending       | plain     | (file ~/Dropbox/orgs/finances.ledger)   | (function return-capture-expense-template)  | :empty-lines-before | 1 | :empty-lines-after | 1 |
| lc | Credit         | plain     | (file ~/Dropbox/orgs/finances.ledger)   | (function return-capture-credit-template)   | :empty-lines-before | 1 | :empty-lines-after | 1 |
| li | Income         | plain     | (file ~/Dropbox/orgs/finances.ledger)   | (function return-capture-income-template)   | :empty-lines-before | 1 | :empty-lines-after | 1 |
| lt | Transfer       | plain     | (file ~/Dropbox/orgs/finances.ledger)   | (function return-capture-transfer-template) | :empty-lines-before | 1 | :empty-lines-after | 1 |
| b  | Blog idea      | entry     | (file (org-file-path blog-ideas.org))   | * TODO %?\n                                 |                     |   |                    |   |
| p  | Phd Notes      | entry     | (file (org-file-path Phd Notebook.org)) |                                             |                     |   |                    |   |
| t  | Todo tasks     | entry     | (file (org-file-path to-do.org))        | * TODO %?\n                                 |                     |   |                    |   |
| r  | Reading        | checkitem | (file (org-file-path to-read.org))      |                                             |                     |   |                    |   |
| R  | Random Notes   | entry     | (file org-index-file)                   | * %?\n                                      |                     |   |                    |   |

When I'm starting an org capture template I'd like to begin in insert mode. I'm
opening it up in order to start typing something, so this skips a step.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
*** Keybinds for org
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC
* Which key
#+BEGIN_SRC emacs-lisp
(require 'which-key)
(which-key-mode)
(which-key-setup-side-window-bottom)

#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
(projectile-mode)

#+END_SRC
* Writing config
** Linting prose

I use [[http://proselint.com/][proselint]] to check my prose for common errors. This creates a flycheck
checker that runs proselint in texty buffers and displays my errors.

#+BEGIN_SRC emacs-lisp
  (require 'flycheck)

  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))

  (add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

Use flycheck in the appropriate buffers:

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook #'flycheck-mode)
  (add-hook 'org-mode-hook #'flycheck-mode)
  (add-hook 'LaTeX-mode-hook #'flycheck-mode)

  (require 'flyspell-correct-helm)
  (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-previous-word-generic)
#+END_SRC
** Wrap paragraphs automatically

=AutoFillMode= automatically wraps paragraphs, kinda like hitting =M-q=. I wrap
a lot of paragraphs, so this automatically wraps 'em when I'm writing text,
Markdown, or Org.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC
** Latex Config
#+BEGIN_SRC emacs-lisp
   ;;    (require 'tex-mik)
       (setq TeX-auto-save t)
       (setq TeX-parse-self t)
       (setq-default TeX-master nil)
       (add-hook 'LaTeX-mode-hook 'visual-line-mode)
       (add-hook 'LaTeX-mode-hook 'flyspell-mode)
       (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
       (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
       (setq reftex-plug-into-AUCTeX t)
  (require 'auctex-latexmk)
     (auctex-latexmk-setup)
      ; (require 'auto-complete-auctex)
     (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    ;   (setq TeX-PDF-mode t)
#+END_SRC
** Syntex with evince
#+BEGIN_SRC emacs-lisp
(require 'dbus)

(defun un-urlify (fname-or-url)
  "A trivial function that replaces a prefix of file:/// with just /."
  (if (string= (substring fname-or-url 0 8) "file:///")
     (substring fname-or-url 7)
    fname-or-url))

(defun th-evince-sync (file linecol &rest ignored)
  (let* ((fname (un-urlify file))
         (buf (find-buffer-visiting fname))
         (line (car linecol))
         (col (cadr linecol)))
    (if (null buf)
        (message "[Synctex]: %s is not opened..." fname)
      (switch-to-buffer buf)
      (goto-line (car linecol))
      (unless (= col -1)
        (move-to-column col)))))

(defvar *dbus-evince-signal* nil)

(defun enable-evince-sync ()
  (require 'dbus)
  (when (and
         (eq window-system 'x)
         (fboundp 'dbus-register-signal))
    (unless *dbus-evince-signal*
      (setf *dbus-evince-signal*
            (dbus-register-signal
             :session nil "/org/gnome/evince/Window/0"
             "org.gnome.evince.Window" "SyncSource"
             'th-evince-sync)))))

(add-hook 'LaTeX-mode-hook 'enable-evince-sync)

#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "markdown"))

#+END_SRC
* Theme
###+BEGIN_SRC emacs-lisp
##  (require 'doom-themes)
##  (load-theme 'doom-one-light t) ;; or doom-dark, etc.
##
##  ;;; Settings (defaults)
##  (setq doom-enable-bold t    ; if nil, bolding are universally disabled
##        doom-enable-italic t  ; if nil, italics are universally disabled
##
##        ;; doom-one specific settings
##      ;  doom-one-brighter-modeline nil
##      ;  doom-one-brighter-comments nil
##        )
##
##  ;;; OPTIONAL
##  ;; brighter source buffers
##  (add-hook 'find-file-hook 'doom-buffer-mode)
##  ;; brighter minibuffer when active
##  (add-hook 'minibuffer-setup-hook 'doom-brighten-minibuffer)
##  ;; Enable custom neotree theme
##  (require 'doom-neotree)    ; all-the-icons fonts must be installed!
##  ; Enable nlinum line highlighting
##  (require 'doom-nlinum)     ; requires nlinum and hl-line-mode
##
##  (setq org-fontify-whole-heading-line t
##        org-fontify-done-headline t
##        org-fontify-quote-and-verse-blocks t)
##
###+END_SRC

#+BEGIN_SRC emacs-lisp
(load-theme 'zenburn t)

#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp

(elpy-enable)
#+END_SRC
* Library -- org-ref
** Basic config
#+BEGIN_SRC emacs-lisp
(require 'doi-utils)
(require 'org-ref-wos)
(require 'org-ref-scopus)
(require 'org-ref-isbn)
(require 'org-ref-arxiv)
(require 'org-ref-sci-id)
(require 'x2bib)
(require 'org-ref-latex)
(require 'org-ref-pdf)
(require 'org-ref-url-utils)
(setq reftex-default-bibliography '("~/Library/MasterReferences.bib"))

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/Library/notes.org"
      org-ref-default-bibliography '("~/Library/MasterReferences.bib")
      org-ref-pdf-directory "~/Library/bibtex-pdfs/")

#+END_SRC
** To open pdfs
#+BEGIN_SRC emacs-lisp
(defun my/org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
         (pdf-file (car (bibtex-completion-find-pdf key))))
    (if (file-exists-p pdf-file)
        (org-open-file pdf-file)
      (message "No PDF found for %s" key))))

(setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)

#+END_SRC
* PDF tools
** Pdf tool setup
#+BEGIN_SRC emacs-lisp
(require 'pdf-tools)

(add-hook 'pdf-tools-enabled-hook 'auto-revert-mode)
(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))
#+END_SRC
* Ledger mode
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :init
    (setq ledger-clear-whole-transactions 1)

    :config
    (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
    :mode "\\.ledger\\'")
  (use-package flycheck-ledger
    :ensure t
    :init
    :mode "\\.ledger\\'")
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output silent


#+END_SRC
* Windmove
#+BEGIN_SRC emacs-lisp
(use-package windmove
  ;; :defer 4
  :ensure t
  :config
 (global-set-key (kbd "C-c <left>")  'windmove-left)
 (global-set-key (kbd "C-c <right>") 'windmove-right)
 (global-set-key (kbd "C-c <up>")    'windmove-up) 
 (global-set-key (kbd "C-c <down>")  'windmove-down)
 
  ;; wrap around at edges
  (setq windmove-wrap-around t))

#+END_SRC
* G-cal for orgs
#+BEGIN_SRC emacs-lisp
(use-package org-gcal
  :ensure t
  :config
  (setq
	org-gcal-file-alist '(("ashfaq.farooqui@gmail.com" .  "~/Dropbox/orgs/gcal.org"))))
(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))

(use-package calfw
  :ensure ;TODO: 
  :config
  (require 'calfw) 
  (require 'calfw-org)
  (setq cfw:org-overwrite-default-keybinding t)
  (require 'calfw-ical)

  (defun mycalendar ()
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      ;; (cfw:org-create-source "Green")  ; orgmode source
      (cfw:ical-create-source "gcal" "https://calendar.google.com/calendar/ical/ashfaq.farooqui%40gmail.com/public/basic.ics" "IndianRed") ; google calendar ICS
      ))) 
  (setq cfw:org-overwrite-default-keybinding t))

(use-package calfw-gcal
	:ensure t
	:config
	(require 'calfw-gcal))
#+END_SRC
* mail client
#+BEGIN_SRC emacs-lisp

#+END_SRC

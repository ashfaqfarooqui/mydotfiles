# -*- mode: org; coding: utf-8; -*-
#+TITLE: Ashfaq Farooqui's Emacs Configuration
#+AUTHOR: Ashfaq Farooqui
#+EMAIL: ashfaq@ashfaqfarooqui.me
#+OPTIONS: toc:3 num:nil
#+startup: overview



* User Details
#+begin_src emacs-lisp
     (setq user-full-name "Ashfaq Farooqui")
     (setq user-mail-address "ashfaq@ashfaqfarooqui.me")





(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil) ; default is 7200 (2h)



#+end_src
* Visual  configuration
** posframe
#+BEGIN_SRC emacs-lisp
(after! ivy-posframe
  (setf (alist-get t ivy-posframe-display-functions-alist)
        #'ivy-posframe-display-at-frame-top-center)
  (setf (alist-get 'swiper ivy-posframe-display-functions-alist)
        #'ivy-posframe-display-at-frame-top-center)
  (setq ivy-posframe-border-width 10
        ivy-posframe-parameters (append ivy-posframe-parameters '((min-width . 120)
                                                                  (left-fringe . 3)
                                                                  (right-fringe . 3)))))


(setq ivy-posframe-width 120)


(setq posframe-arghandler
      (lambda (_buffer-or-name key value)
        (or (eq key :lines-truncate)
            value)))
#+END_SRC

#+RESULTS:
| lambda | (_buffer-or-name key value) | (or (eq key :lines-truncate) value) |

** Buffer Name
#+BEGIN_SRC emacs-lisp




(defadvice! doom-modeline--reformat-roam (orig-fun)
  :around #'doom-modeline-buffer-file-name
  (message "Reformat?")
  (message (buffer-file-name))
  (if (s-contains-p org-roam-directory (or buffer-file-name ""))
      (replace-regexp-in-string
       "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
       "ü¢î(\\1-\\2-\\3) "
       (funcall orig-fun))
    (funcall orig-fun)))




(setq doom-fallback-buffer-name "‚ñ∫ Doom"
      +doom-dashboard-name "‚ñ∫ Doom")

(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string ".*/[0-9]*-?" "ü¢î " buffer-file-name)
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ‚óâ %s" " ‚ÄÜ‚óè‚ÄÜ %s") project-name))))))
#+END_SRC

#+RESULTS:
|   | (:eval (if (s-contains-p org-roam-directory (or buffer-file-name )) (replace-regexp-in-string .*/[0-9]*-? ü¢î  buffer-file-name) %b)) | (:eval (let ((project-name (projectile-project-name))) (unless (string= - project-name) (format (if (buffer-modified-p)  ‚óâ %s  ‚ÄÜ‚óè‚ÄÜ %s) project-name)))) |

** Theme
#+BEGIN_SRC emacs-lisp
;; Set customization options to values of your choice
(after! modus-themes
  (setq modus-themes-slanted-constructs t
        modus-themes-bold-constructs t
        modus-themes-fringes 'subtle ; {nil,'subtle,'intense}
        modus-themes-mode-line '3d ; {nil,'3d,'moody}
        modus-themes-syntax 'alt-syntax ; Lots of options---continue reading the manual {nil,faint,'yellow-comments,'green-strings,'yellow-comments-green-strings,'alt-syntax,'alt-syntax-yellow-comments}

        modus-themes-intense-hl-line t
        modus-themes-paren-match 'intense-bold ; {nil,'subtle-bold,'intense,'intense-bold}
        modus-themes-links 'faint ; Lots of options---continue reading the manual
        modus-themes-no-mixed-fonts t
        modus-themes-prompts 'subtle ; {nil,'subtle,'intense}
        modus-themes-completions'moderate ; {nil,'moderate,'opinionated}
        modus-themes-region 'bg-only-no-extend ; {nil,'no-extend,'bg-only,'bg-only-no-extend}
        modus-themes-diffs nil ; {nil,'desaturated,'fg-only,'bg-only}
        modus-themes-org-blocks 'grayscale ; {nil,'grayscale,'rainbow}
        modus-themes-headings ; Lots of options---continue reading the manual
        '((1 . section)
          (2 . section-no-bold)
          (3 . rainbow-line)
          (t . rainbow-line-no-bold))
        modus-themes-variable-pitch-headings t
        modus-themes-scale-headings t
        modus-themes-scale-1 1.1
        modus-themes-scale-2 1.15
        modus-themes-scale-3 1.21
        modus-themes-scale-4 1.27
        modus-themes-scale-5 1.33)
  )
(setq doom-theme 'modus-vivendi)
#+END_SRC

#+RESULTS:
: 1.3

** In editor
taken from https://tecosaur.github.io/emacs-config/config.html#font-display
*** Symbols
It's also nice to change the character used for collapsed items (by default ~‚Ä¶~),
I think ~‚ñæ~ is better for indicating 'collapsed section'.
and add an extra ~org-bullet~ to the default list of four.
I've also added some fun alternatives, just commented out.
#+begin_src emacs-lisp
;; (after! org
;;   (use-package org-pretty-tags
;;   :config
;;    (setq org-pretty-tags-surrogate-strings
;;          `(("uni"        . ,(all-the-icons-faicon   "graduation-cap" :face 'all-the-icons-purple  :v-adjust 0.01))
;;            ("ucc"        . ,(all-the-icons-material "computer"       :face 'all-the-icons-silver  :v-adjust 0.01))
;;            ("assignment" . ,(all-the-icons-material "library_books"  :face 'all-the-icons-orange  :v-adjust 0.01))
;;            ("test"       . ,(all-the-icons-material "timer"          :face 'all-the-icons-red     :v-adjust 0.01))
;;            ("lecture"    . ,(all-the-icons-fileicon "keynote"        :face 'all-the-icons-orange  :v-adjust 0.01))
;;            ("email"      . ,(all-the-icons-faicon   "envelope"       :face 'all-the-icons-blue    :v-adjust 0.01))
;;            ("read"       . ,(all-the-icons-octicon  "book"           :face 'all-the-icons-lblue   :v-adjust 0.01))
;;            ("article"    . ,(all-the-icons-octicon  "file-text"      :face 'all-the-icons-yellow  :v-adjust 0.01))
;;            ("web"        . ,(all-the-icons-faicon   "globe"          :face 'all-the-icons-green   :v-adjust 0.01))
;;            ("info"       . ,(all-the-icons-faicon   "info-circle"    :face 'all-the-icons-blue    :v-adjust 0.01))
;;            ("issue"      . ,(all-the-icons-faicon   "bug"            :face 'all-the-icons-red     :v-adjust 0.01))
;;            ("someday"    . ,(all-the-icons-faicon   "calendar-o"     :face 'all-the-icons-cyan    :v-adjust 0.01))
;;            ("idea"       . ,(all-the-icons-octicon  "light-bulb"     :face 'all-the-icons-yellow  :v-adjust 0.01))
;;            ("emacs"      . ,(all-the-icons-fileicon "emacs"          :face 'all-the-icons-lpurple :v-adjust 0.01))))
;;    (org-pretty-tags-global-mode)))

(after! org-superstar
  (setq org-superstar-headline-bullets-list '("‚óâ" "‚óã" "‚ú∏" "‚úø" "‚ú§" "‚úú" "‚óÜ" "‚ñ∂")
        ;; org-superstar-headline-bullets-list '("‚Ö†" "‚Ö°" "‚Ö¢" "‚Ö£" "‚Ö§" "‚Ö•" "‚Ö¶" "‚Öß" "‚Ö®" "‚Ö©")
        org-superstar-prettify-item-bullets t ))
(after! org
  (setq org-ellipsis " ‚ñæ "
        org-priority-highest ?A
        org-priority-lowest ?E
        org-priority-faces
        '((?A . 'all-the-icons-red)
          (?B . 'all-the-icons-orange)
          (?C . 'all-the-icons-yellow)
          (?D . 'all-the-icons-green)
          (?E . 'all-the-icons-blue))))
#+end_src
It's also nice to make use of the Unicode characters for check boxes, and other commands.
#+begin_src emacs-lisp
(after! org
  (appendq! +ligatures-extra-symbols
            `(:checkbox      "‚òê"
              :pending       "‚óº"
              :checkedbox    "‚òë"
              :list_property "‚à∑"
              :results       "ü†∂"
              :property      "‚ò∏"
              :properties    "‚öô"
              :end           "‚àé"
              :options       "‚å•"
              :title         "ùôè"
              :subtitle      "ùô©"
              :author        "ùòº"
              :date          "ùòø"
              :latex_header  "‚á•"
              :latex_class   "üÑ≤"
              :beamer_header "‚Ü†"
              :begin_quote   "‚ùÆ"
              :end_quote     "‚ùØ"
              :begin_export  "‚ØÆ"
              :end_export    "‚Ø¨"
              :priority_a   ,(propertize "‚öë" 'face 'all-the-icons-red)
              :priority_b   ,(propertize "‚¨Ü" 'face 'all-the-icons-orange)
              :priority_c   ,(propertize "‚ñ†" 'face 'all-the-icons-yellow)
              :priority_d   ,(propertize "‚¨á" 'face 'all-the-icons-green)
              :priority_e   ,(propertize "‚ùì" 'face 'all-the-icons-blue)
              :em_dash       "‚Äî"))
  (set-ligatures! 'org-mode
    :merge t
    :checkbox      "[ ]"
    :pending       "[-]"
    :checkedbox    "[X]"
    :list_property "::"
    :results       "#+results:"
    :property      "#+property:"
    :property      ":PROPERTIES:"
    :end           ":END:"
    :options       "#+options:"
    :title         "#+title:"
    :subtitle      "#+subtitle:"
    :author        "#+author:"
    :date          "#+date:"
    :latex_class   "#+latex_class:"
    :latex_header  "#+latex_header:"
    :beamer_header "#+beamer_header:"
    :begin_quote   "#+begin_quote"
    :end_quote     "#+end_quote"
    :begin_export  "#+begin_export"
    :end_export    "#+end_export"
    :priority_a    "[#A]"
    :priority_b    "[#B]"
    :priority_c    "[#C]"
    :priority_d    "[#D]"
    :priority_e    "[#E]"
    :em_dash       "---"))
(plist-put +ligatures-extra-symbols :name "‚Åç") ; or ‚Ä∫ could be good?
#+end_src
We also like ~org-fragtog~, and that wants a hook.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

** In latex editor
#+BEGIN_SRC emacs-lisp

;(add-hook 'LaTeX-mode-hook #'mixed-pitch-mode)

#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp


(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 30)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 50)
      doom-variable-pitch-font (font-spec :family "FiraGO" :size 30))
(after! doom-theme
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))



                                        ;(setq doom-font (font-spec :family "mononoki Nerd Font" :size 12 :weight 'semi-light)
                                        ;      doom-variable-pitch-font (font-spec :family "mononoki Nerd Font") ; inherits `doom-font''s :size
                                        ;      doom-big-font (font-spec :family "mononoki Nerd Font" :size 19))




                                        ;(setq doom-font (font-spec :family "mononoki Nerd Font" :size 12 :weight 'semi-light)
                                        ;      doom-variable-pitch-font (font-spec :family "Fira Sans") ; inherits `doom-font''s :size
                                        ;      doom-unicode-font (font-spec :family "mononoki Nerd Font" :size 12)
                                        ;      doom-big-font (font-spec :family "Fira Mono" :size 19))


                                        ;(setq doom-font (font-spec :family "Mononoki Nerd Font" :size 30)
                                        ;      doom-big-font (font-spec :family "Mononoki Nerd Font" :size 36)
                                        ;      doom-variable-pitch-font (font-spec :family "iA Writer Quattro S" :size 24)
                                        ;)



                                        ;(setq doom-font (font-spec :family "iA Writer Quattro S" :size 24)
                                        ;      doom-big-font (font-spec :family "iA Writer Quattro S" :size 36)
                                        ;      doom-variable-pitch-font (font-spec :family "iA Writer Quattro S" :size 24)
                                        ;      doom-serif-font (font-spec :family "iA Writer Quattro S" :weight 'light))
#+END_SRC
** Rainbow mode
#+BEGIN_SRC emacs-lisp
(use-package! rainbow-mode
  :after rainbow-delimiter
:init (rainbow-mode))

#+END_SRC

** nyan mode
#+BEGIN_SRC emacs-lisp
    (after! nyan-mode
         :init
        (nyan-mode))


#+END_SRC
*
* My Defaults
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
** Supersave
#+begin_src emacs-lisp
(after! super-save
(super-save-mode 1)
(setq super-save-exclude '(".gpg"))
(setq super-save-auto-save-when-idle t)
)
#+END_SRC
** Swiper, avy, counsel
Look at what we need from here. its mainly the key bindings I require for swiper and avy.
#+BEGIN_SRC emacs-lisp

(after! ivy
  (setq counsel-grep-base-command
        "rg -i -M 120 --no-heading --line-number --color never %s %s")

                                        ;  (setq avy-timeout-seconds 2.0)

  ;(map!
  ; :desc "Search swiper-isearch" "C-s" #'swiper-isearch) ;


                                        ;(define-key global-map "\C-zb" 'swiper-isearch)
                                        ;(define-key global-map "\C-zc" 'avy-goto-char-2)
                                        ;(define-key global-map "\C-zw" 'avy-goto-word)
                                        ;(define-key global-map "\C-zl" 'avy-goto-line)
  )
#+END_SRC
** Wrap paragraphs automatically
I dont like =AutoFillMode= which  automatically wraps paragraphs, kinda
like hitting =M-q=. But i like wrapped paragraphs, hence use visual fill
mode

#+BEGIN_SRC emacs-lisp

        (add-hook! org-mode :append
                   #'visual-line-mode)

        (add-hook! text-mode :append
                   #'visual-line-mode)

        (add-hook! latex-mode :append
                   #'visual-line-mode)

(use-package! visual-fill-column
          :config
          (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
          (advice-add 'text-scale-adjust :after
                      #'visual-fill-column-adjust)
          (setq visual-fill-column-width 100)
          (setq-default fill-column 100)
          (setq visual-fill-column-center-text t)
          )
#+END_SRC
#+RESULTS:
: t

** smartparens
#+BEGIN_SRC emacs-lisp

(after! smartparens
  :config
  (map! :map smartparens-mode-map
        "C-M-f" #'sp-forward-sexp
        "C-M-b" #'sp-backward-sexp
        "C-M-u" #'sp-backward-up-sexp
        "C-M-d" #'sp-down-sexp
        "C-M-p" #'sp-backward-down-sexp
        "C-M-n" #'sp-up-sexp
        "C-M-s" #'sp-splice-sexp
        "C-)" #'sp-forward-slurp-sexp
        "C-}" #'sp-forward-barf-sexp
        "C-(" #'sp-backward-slurp-sexp
        "C-M-)" #'sp-backward-slurp-sexp
        "C-M-)" #'sp-backward-barf-sexp))
#+END_SRC
** dubcaps mode
#+BEGIN_SRC emacs-lisp
(after! org
  (defun dcaps-to-scaps ()
    "Convert word in DOuble CApitals to Single Capitals."
    (interactive)
    (and (= ?w (char-syntax (char-before)))
         (save-excursion
           (let ((end (point)))
             (and (if (called-interactively-p)
                      (skip-syntax-backward "w")
                    (= -3 (skip-syntax-backward "w")))
                  (let (case-fold-search)
                    (looking-at "\\b[[:upper:]]\\{2\\}[[:lower:]]"))
                  (capitalize-region (point) end))))))
  (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)

  (define-minor-mode dubcaps-mode
    "Toggle `dubcaps-mode'.  Converts words in DOuble CApitals to
Single Capitals as you type."
    :init-value nil
    :lighter (" DC")
    (if dubcaps-mode
        (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)
      (remove-hook 'post-self-insert-hook #'dcaps-to-scaps 'local)))


  (add-hook 'text-mode-hook #'dubcaps-mode)
  (add-hook 'org-mode-hook #'dubcaps-mode))
#+END_SRC
** info colors
#+BEGIN_SRC emacs-lisp

(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)

;(add-hook 'Info-mode-hook #'mixed-pitch-mode)



#+END_SRC
** Plaintext ascii colors
#+BEGIN_SRC emacs-lisp
(after! text-mode
  (add-hook! 'text-mode-hook
             ;; Apply ANSI color codes
             (with-silent-modifications
               (ansi-color-apply-on-region (point-min) (point-max)))))

#+END_SEC


** Greedily run on daemon load
#+begin_src emacs-lisp

(defun greedily-do-daemon-setup ()
  (require 'org)
  (when (require 'mu4e nil t)
    (setq mu4e-confirm-quit t)
    (setq +mu4e-lock-greedy t)
    (setq +mu4e-lock-relaxed t)
    (+mu4e-lock-add-watcher)
    (when (+mu4e-lock-available t)
      (mu4e~start)))
  (when (require 'elfeed nil t)
    (run-at-time nil (* 8 60 60) #'elfeed-update)))

(when (daemonp)
  (add-hook 'emacs-startup-hook #'greedily-do-daemon-setup))
#+end_src
** Modes
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)                         ; Replace selection when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(display-battery-mode 1)                          ; On laptops it's nice to know how much power you have
(global-subword-mode 1)                           ; Iterate through CamelCase words
(setq initial-major-mode 'org-mode)
(setq hungry-delete-mode t)
(show-smartparens-mode)
(global-hungry-delete-mode)
(nyan-mode)
#+END_SRC

* Company
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.

#+end_src
* Writeroom
#+begin_src emacs-lisp
(after! writeroom-mode

(setq +zen-text-scale 0.6)



  (add-hook 'writeroom-mode-hook
            (defun +zen-cleaner-org ()
              (when (and (eq major-mode 'org-mode) writeroom-mode)
                (setq-local -display-line-numbers display-line-numbers
                            display-line-numbers nil)
                (setq-local -org-indent-mode org-indent-mode)
                (org-indent-mode -1)
                (when (featurep 'org-superstar)
                  (setq-local -org-superstar-headline-bullets-list org-superstar-headline-bullets-list
                              ;; org-superstar-headline-bullets-list '("üôê" "üôë" "üôí" "üôì" "üôî" "üôï" "üôñ" "üôó")
                              org-superstar-headline-bullets-list '("üôò" "üôô" "üôö" "üôõ")
                              -org-superstar-remove-leading-stars org-superstar-remove-leading-stars
                              org-superstar-remove-leading-stars t)
                  (org-superstar-restart)))))
  (add-hook 'writeroom-mode-disable-hook
            (defun +zen-dirty-org ()
              (when (eq major-mode 'org-mode)
                (setq-local display-line-numbers -display-line-numbers)
                (when -org-indent-mode
                  (org-indent-mode 1))
                (when (featurep 'org-superstar)
                  (setq-local org-superstar-headline-bullets-list -org-superstar-headline-bullets-list
                              org-superstar-remove-leading-stars -org-superstar-remove-leading-stars)
                  (org-superstar-restart))))))
#+end_src
* Org Mode
** org habit
#+BEGIN_SRC emacs-lisp
(after! org
(add-to-list 'org-modules 'org-habit t)
; position the habit graph on the agenda to the right of the default
(setq org-habit-graph-column 50)

(require 'org-habit)
(setq org-habit-following-days 7)
(setq org-habit-preceding-days 35)
(setq org-habit-show-habits t)
)



#+END_SRC

** COMMENT special keys
Use the special C-a, C-e and C-k definitions for Org, which enable some special behavior in headings.
#+begin_src emacs-lisp

        (after! org
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t))

#+end_src
** Directory setup
Store my org files in =~/Orgs=, define an index file and an
archive of finished tasks in =archive.org=.

#+BEGIN_SRC emacs-lisp

(after! org
(setq org-directory "~/Orgs")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-inbox-file
        (concat (org-file-path "inbox-orgzly.org")))
  (setq org-personal-file (org-file-path "personal.org"))
  (setq org-index-file (org-file-path "index.org"))
  (setq org-phd-file (concat (org-file-path "PHD/Phd.org")))
(setq org-basb-main-file (concat (org-file-path "BASB/main.org")))
)

#+END_SRC
** Display preferences



some more misc settings
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-pretty-entities          t ; UTF8 all the things!
        org-support-shift-select     t ; holding shift and moving point should select things
        org-M-RET-may-split-line     nil ; M-RET may never split a line
        org-enforce-todo-dependencies t ; can't finish parent before children
        org-enforce-todo-checkbox-dependencies t ; can't finish parent before children
        org-hide-emphasis-markers nil ; make words italic or bold, hide / and *
        org-fold-catch-invisible-edits 'smart
                                        ;org-catch-invisible-edits 'error ; don't let me edit things I can't see
        org-startup-indented t) ; start with indentation setup
  (setq org-startup-with-inline-images t) ; show inline images
  (setq org-log-done t)
  (setq org-goto-interface (quote outline-path-completion))

  (setq org-special-ctrl-a/e t))
#+END_SRC
** Org-tags
#+BEGIN_SRC emacs-lisp
; Tags with fast selection keys
(after! org
(setq org-tag-alist (quote ((:startgroup)
                            ("@errand" . ?e)
                            ("@office" . ?o)
                            ("@home" . ?H)
                            (:endgroup)
                      ("Challenge" . ?1)
                      ("Average" . ?2)
                      ("Easy" . ?3)
                            ("crypt" . ?E)
                            ("NOTE" . ?n)
)))

; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))

; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options t)
)
#+END_SRC

#+RESULTS:
: t
** org-agenda
Use all the files to derive agenda.
#+BEGIN_SRC emacs-lisp
(after! org
(setq org-agenda-files (list org-index-file org-inbox-file org-basb-main-file))
                                          ;   (setq org-agenda-include-diary t)
                                          ;   (setq org-agenda-include-all-todo t)
  (setq org-habit-show-habits-only-for-today t)


  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)

  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)




  (use-package! org-super-agenda
    :after org
    :config
    (org-super-agenda-mode t)
    (setq org-super-agenda-groups
          '(
            (:name "Today\n"
                   :time-grid t
                   :and(:scheduled today :not (:habit t))
                   )
            (:name "Important"
                   :priority "A")
            (:name "Overdue"
                   :deadline past)
            (:name "Habits\n"
                   :habit t)
            (:name "To Scheduled\n"
                   :scheduled nil)
            )  ;; end setq superagenda block
          )) ;; end whole super agenda block


  (add-to-list 'org-agenda-custom-commands
               '("u" "Unscheduled TODOs"
                 ((todo ""
                        ((org-agenda-overriding-header "\nUnscheduled TODO")
                         (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp 'todo '("DONE" "CANCELLED" "MAYBE" "WAITING" "SOMEDAY"))))))) t)
)
#+END_SRC
** Capturing

Define a few common tasks as capture templates. Specifically, I frequently:

- Record ideas for future blog posts in =blog-ideas.org=,
- Record everything related to Phd stuff in =~/Phd Notebook.org=, and
- Maintain a todo list in =to-do.org=.
- Maintain a reading list in =to-read.org=

#+BEGIN_SRC emacs-lisp
(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))

#+END_SRC

#+RESULTS:
: org-journal-find-location

#+BEGIN_SRC emacs-lisp
   (after! org   (setq org-capture-templates
            (quote (

                    ("p" "Protocol" entry (file+headline org-index-file "Links")
                     "* %^{Title}\nCaptured On: %U\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                    ("L" "Protocol Link" entry (file+headline org-index-file "Links")
                     "* %? [[%:link][%:description]] \nCaptured On: %U")

                    ("P" "Project" entry (file+headline org-basb-main-file "Projects")
                     (file "~/.doom.d/templates/newProjecttemplate.org") :empty-lines 1)

                    ("s" "Someday" entry (file+headline "~/Orgs/BASB/somedaymaybe.org" "Someday / Maybe")
                     "* SOMEDAY %?\n")
                    ("m" "Maybe" entry (file+headline "~/Orgs/BASB/somedaymaybe.org" "Someday / Maybe")
                     "* MAYBE %?\n")


                    ("n" "Notes"
                     entry
                     (file+headline org-index-file "Notes")
                     "* %u %? :NOTE:\n")

                    ("t" "Task"
                     entry
                     (file+headline org-index-file "Tasks")
                     "* TODO %?\n")

                     ("h" "health log")
                    ("hr" "Running" entry (file+headline  "~/Orgs/BASB/Areas/Health/log.org" "Running")
                     (file "~/.doom.d/templates/running.org") :empty-lines 1)

                    ("hs" "Sleep" entry (file+headline  "~/Orgs/BASB/Areas/Health/log.org" "Sleep")
                     (file "~/.doom.d/templates/sleep.org") :empty-lines 1)


                    ("e" "Email" entry (file+headline org-index-file "Mail")
                     "* TODO %? email |- %:from: %:subject :EMAIL:\n:PROPERTIES:\n:CREATED: %U\n:EMAIL-SOURCE: %l\n:END:\n%U\n" )



                    ("H" "Habit" entry (file org-index-file)
                     "* TODO %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: TODO\n:END:\n")


                     ("j" "Journal")
                    ("ji" "Inaya Journal" entry (file+olp+datetree "~/Orgs/BASB/Areas/Parenting/Journal.org")
                     "** %(format-time-string \"%R\") %?  \n")

                    ("jp" "Personal Journal" entry (file+olp+datetree "~/Orgs/jrl/journal.org")
                     "** %(format-time-string \"%R\") %? \n")

                    ("jm" "Routine Journal" entry (function org-journal-find-location)
                     (file "~/.doom.d/templates/journal.org") :empty-lines 1)


                    ("c" "cooking")
                    ("cr" "Cookbook" entry (file "~/Orgs/BASB/Reference/Cookbook/cookbook.org")
                     "%(org-chef-get-recipe-from-url)"
                     :empty-lines 1)

                    ("cm" "Manual Cookbook" entry (file "~/Orgs/BASB/Reference/Cookbook/cookbook.org")
                     "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")

              )


                    ))

)

#+END_SRC

#+RESULTS:
| p | Protocol | entry | (file+headline org-index-file Links) | * %^{Title} |

** Encryption
#+BEGIN_SRC emacs-lisp
(after! org
(setq org-crypt-disable-auto-save nil)
(require 'org-crypt)
; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
; GPG key to use for encryption
(setq org-crypt-key "51DE2D88")
)
#+END_SRC

#+RESULTS:
: 51DE2D88

** Org roam
#+BEGIN_SRC emacs-lisp


(after! org-roam
  (setq org-roam-directory "~/Orgs/Roam")
  (map! :leader
        :prefix "n r"
        :desc "org-roam" "l" #'org-roam
        :desc "org-roam-insert" "i" #'org-roam-insert
        :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
        :desc "org-roam-find-file" "f" #'org-roam-find-file
        :desc "org-roam-show-graph" "g" #'org-roam-show-graph
        :desc "org-roam-insert" "i" #'org-roam-insert
        :desc "org-roam-capture" "c" #'org-roam-capture)
)
(after! org-roam
  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+TITLE: ${title}
,#+ROAM_KEY: ${ref}

- source :: ${ref}"
           :unnarrowed t)))

(setq org-roam-capture-templates
        '(
("d" "default" plain (function org-roam--capture-get-point)
     "%?"
     :file-name "%(format-time-string \"%Y%m%d%H%M%SZ--${slug}\" (current-time) t)"
     :head "#+title: ${title}\n"
     :unnarrowed t)


          ("q" "Religion" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "Religion/${slug}"
           :head "#+title: ${title}\n
,#+roam_alias:"
           :unnarrowed t)

                    ))

  )


#+END_SRC
*** org roam server
#+BEGIN_SRC emacs-lisp
(after! org-roam

  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+END_SRC
** Roam bibtex
#+BEGIN_SRC emacs-lisp
 (use-package! org-roam-bibtex
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq org-roam-bibtex-preformat-keywords
   '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "Papers/${slug}"
           :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}\n#+ROAM_TAGS:

- keywords :: ${keywords}

\n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

           :unnarrowed t))))

#+END_SRC
** org noter
#+BEGIN_SRC emacs-lisp

        (after! org
          (setq
           org_notes (concat (getenv "HOME") "/Orgs/Roam/Papers/")
           zot_bib (concat (getenv "HOME") "/References/AshfaqRef.bib")
           )
          )

        (use-package! org-noter
          :after (:any org pdf-view)
          :config
          (setq
           ;; The WM can handle splits
           org-noter-notes-window-location 'other-frame
           ;; Please stop opening frames
           org-noter-always-create-frame nil
           ;; I want to see the whole file
           org-noter-hide-other nil
           ;; Everything is relative to the main notes file
           org-noter-notes-search-path (list org_notes)
           )
          )
#+END_SRC

#+RESULTS:
: t

** Surround region with emphasis or syntax characters
Define and bind interactive commands for each of KEYS that surround the region or insert text. Commands are bound in org-mode-map to each of KEYS. If the region is active, commands surround it with the key character, otherwise call org-self-insert-command.
Taken from: https://github.com/alphapapa/unpackaged.el#surround-region-with-emphasis-or-syntax-characters
#+BEGIN_SRC emacs-lisp
;;;###autoload


(after! org
(defmacro unpackaged/def-org-maybe-surround (&rest keys)
  "Define and bind interactive commands for each of KEYS that surround the region or insert text.
Commands are bound in `org-mode-map' to each of KEYS.  If the
region is active, commands surround it with the key character,
otherwise call `org-self-insert-command'."
  `(progn
     ,@(cl-loop for key in keys
                for name = (intern (concat "unpackaged/org-maybe-surround-" key))
                for docstring = (format "If region is active, surround it with \"%s\", otherwise call `org-self-insert-command'." key)
                collect `(defun ,name ()
                           ,docstring
                           (interactive)
                           (if (region-active-p)
                               (let ((beg (region-beginning))
                                     (end (region-end)))
                                 (save-excursion
                                   (goto-char end)
                                   (insert ,key)
                                   (goto-char beg)
                                   (insert ,key)))
                             (call-interactively #'org-self-insert-command)))
                collect `(define-key org-mode-map (kbd ,key) #',name))))

(unpackaged/def-org-maybe-surround "~" "=" "*" "/" "+"))
#+END_SRC
** Org journal
#+BEGIN_SRC emacs-lisp

(after! org-journal
  (setq org-journal-date-prefix "#+TITLE: "
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-carryover-items nil))
#+END_SRC
** Exporting (general)
#+begin_src emacs-lisp
(after! org (setq org-export-headline-levels 5)) ; I like nesting
#+end_src
I'm also going to make use of an item in =ox-extra= so that I can add an =:ignore:=
tag to headings for the content to be kept, but the heading itself ignored
(unlike =:noexport:= which ignored both heading and content). This is useful when
I want to use headings to provide a structure for writing that doesn't appear in
the final documents.
#+begin_src emacs-lisp
(after! org
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+end_src
** Reference Management
#+BEGIN_SRC emacs-lisp


(use-package! org-ref
  :after org
  :config
  (setq org-ref-completion-library 'org-ref-ivy-cite)

(setq reftex-default-bibliography '("~/References/AshfaqRef.bib"))

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/References/notes.org"
      org-ref-default-bibliography '("~/References/AshfaqRef.bib")
      org-ref-pdf-directory "~/References/"))

#+END_SRC
*** Ivy-bibtex
#+BEGIN_SRC emacs-lisp
(after! ivy-bibtex

  :config
  (setq bibtex-completion-bibliography
        '("/home/ashfaqf/References/AshfaqRef.bib"))
  (setq bibtex-completion-library-path
        '("/home/ashfaqf/References"))

  ;; using bibtex path reference to pdf file
  (setq bibtex-completion-pdf-field "File")
)

#+END_SRC
* Narrow widen
Taken from https://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
#+BEGIN_SRC emacs-lisp

(after! org
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  )
#+END_SRC
* treemacs
#+BEGIN_SRC emacs-lisp
(after! treemacs
  (defvar treemacs-file-ignore-extensions '()
    "File extension which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-globs '()
    "Globs which will are transformed to `treemacs-file-ignore-regexps' which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-regexps '()
    "RegExps to be tested to ignore files, generated from `treeemacs-file-ignore-globs'")
  (defun treemacs-file-ignore-generate-regexps ()
    "Generate `treemacs-file-ignore-regexps' from `treemacs-file-ignore-globs'"
    (setq treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp treemacs-file-ignore-globs)))
  (if (equal treemacs-file-ignore-globs '()) nil (treemacs-file-ignore-generate-regexps))
  (defun treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions', and `treemacs-file-ignore-regexps'"
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (let ((ignore-file nil))
          (dolist (regexp treemacs-file-ignore-regexps ignore-file)
            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-filter))

        (setq treemacs-file-ignore-extensions
      '(;; LaTeX
        "aux"
        "ptc"
        "fdb_latexmk"
        "fls"
        "synctex.gz"
        "toc"
        ;; LaTeX - glossary
        "glg"
        "glo"
        "gls"
        "glsdefs"
        "ist"
        "acn"
        "acr"
        "alg"
        ;; LaTeX - pgfplots
        "mw"
        ;; LaTeX - pdfx
        "pdfa.xmpi"
        ))
(setq treemacs-file-ignore-globs
      '(;; LaTeX
        "*/_minted-*"
        ;; AucTeX
        "*/.auctex-auto"
        "*/_region_.log"
        "*/_region_.tex"))

#+END_SRC

* Applications

** Magit
#+BEGIN_SRC emacs-lisp
;;; :tools magit

(after! magit

 (setq magit-repository-directories '(("~/Code" . 2) ("~/Papers" . 2))
      magit-save-repository-buffers nil
      ;; Don't restore the wconf after quitting magit, it's jarring
      magit-inhibit-save-previous-winconf t
      transient-values '((magit-commit "--gpg-sign=7A804BCB51DE2D88")
                         (magit-rebase "--autosquash" "--gpg-sign=7A804BCB51DE2D88")
                         (magit-pull "--rebase" "--gpg-sign=7A804BCB51DE2D88")))

 (setq magit-repolist-columns
      '(("Name"    25 magit-repolist-column-ident                  ())
        ("Version" 25 magit-repolist-column-version                ())
        ("D"        1 magit-repolist-column-dirty                  ())
        ("Branch"  10 magit-repolist-column-branch                () )
        ("L<U"      3 magit-repolist-column-unpulled-from-upstream ((:right-align t)))
        ("L>U"      3 magit-repolist-column-unpushed-to-upstream   ((:right-align t)))
        ("Path"    99 magit-repolist-column-path                   ())))


)
#+END_SRC

#+RESULTS:
| Name    | 25 | magit-repolist-column-ident                  | nil                |
| Version | 25 | magit-repolist-column-version                | nil                |
| D       |  1 | magit-repolist-column-dirty                  | nil                |
| B       | 10 | magit-repolist-column-branch                 | nil                |
| L<U     |  3 | magit-repolist-column-unpulled-from-upstream | ((:right-align t)) |
| L>U     |  3 | magit-repolist-column-unpushed-to-upstream   | ((:right-align t)) |
| Path    | 99 | magit-repolist-column-path                   | nil                |

** ebooks
*** Calibre
#+BEGIN_SRC emacs-lisp

 (after! calibredb

  :init
  (autoload 'calibredb "calibredb")
  :config
  (setq calibredb-root-dir "~/CalibreLibrary")
  (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
  (setq calibredb-library-alist '(("~/CalibreLibrary")))

  (map! :map calibredb-show-mode-map
        :ne "?" #'calibredb-entry-dispatch
        :ne "o" #'calibredb-find-file
        :ne "O" #'calibredb-find-file-other-frame
        :ne "V" #'calibredb-open-file-with-default-tool
        :ne "s" #'calibredb-set-metadata-dispatch
        :ne "e" #'calibredb-export-dispatch
        :ne "q" #'calibredb-entry-quit
        :ne "." #'calibredb-open-dired
        :ne [tab] #'calibredb-toggle-view-at-point
        :ne "M-t" #'calibredb-set-metadata--tags
        :ne "M-a" #'calibredb-set-metadata--author_sort
        :ne "M-A" #'calibredb-set-metadata--authors
        :ne "M-T" #'calibredb-set-metadata--title
        :ne "M-c" #'calibredb-set-metadata--comments)
  (map! :map calibredb-search-mode-map
        :ne [mouse-3] #'calibredb-search-mouse
        :ne "RET" #'calibredb-find-file
        :ne "?" #'calibredb-dispatch
        :ne "a" #'calibredb-add
        :ne "A" #'calibredb-add-dir
        :ne "c" #'calibredb-clone
        :ne "d" #'calibredb-remove
        :ne "D" #'calibredb-remove-marked-items
        :ne "j" #'calibredb-next-entry
        :ne "k" #'calibredb-previous-entry
        :ne "l" #'calibredb-virtual-library-list
        :ne "L" #'calibredb-library-list
        :ne "n" #'calibredb-virtual-library-next
        :ne "N" #'calibredb-library-next
        :ne "p" #'calibredb-virtual-library-previous
        :ne "P" #'calibredb-library-previous
        :ne "s" #'calibredb-set-metadata-dispatch
        :ne "S" #'calibredb-switch-library
        :ne "o" #'calibredb-find-file
        :ne "O" #'calibredb-find-file-other-frame
        :ne "v" #'calibredb-view
        :ne "V" #'calibredb-open-file-with-default-tool
        :ne "." #'calibredb-open-dired
        :ne "b" #'calibredb-catalog-bib-dispatch
        :ne "e" #'calibredb-export-dispatch
        :ne "r" #'calibredb-search-refresh-and-clear-filter
        :ne "R" #'calibredb-search-clear-filter
        :ne "q" #'calibredb-search-quit
        :ne "m" #'calibredb-mark-and-forward
        :ne "f" #'calibredb-toggle-favorite-at-point
        :ne "x" #'calibredb-toggle-archive-at-point
        :ne "h" #'calibredb-toggle-highlight-at-point
        :ne "u" #'calibredb-unmark-and-forward
        :ne "i" #'calibredb-edit-annotation
        :ne "DEL" #'calibredb-unmark-and-backward
        :ne [backtab] #'calibredb-toggle-view
        :ne [tab] #'calibredb-toggle-view-at-point
        :ne "M-n" #'calibredb-show-next-entry
        :ne "M-p" #'calibredb-show-previous-entry
        :ne "/" #'calibredb-search-live-filter
        :ne "M-t" #'calibredb-set-metadata--tags
        :ne "M-a" #'calibredb-set-metadata--author_sort
        :ne "M-A" #'calibredb-set-metadata--authors
        :ne "M-T" #'calibredb-set-metadata--title
        :ne "M-c" #'calibredb-set-metadata--comments)
  )

#+END_SRC

*** Nov
#+begin_src emacs-lisp

(use-package! nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (map! :map nov-mode-map
        :n "RET" #'nov-scroll-up)

  (defun doom-modeline-segment--nov-info ()
    (concat
     " "
     (propertize
      (cdr (assoc 'creator nov-metadata))
      'face 'doom-modeline-project-parent-dir)
     " "
     (cdr (assoc 'title nov-metadata))
     " "
     (propertize
      (format "%d/%d"
              (1+ nov-documents-index)
              (length nov-documents))
      'face 'doom-modeline-info)))

  (advice-add 'nov-render-title :override #'ignore)

  (defun +nov-mode-setup ()
    (face-remap-add-relative 'variable-pitch
                             :family "Merriweather"
                             :height 1.4
                             :width 'semi-expanded)
    (face-remap-add-relative 'default :height 1.3)
    (setq-local line-spacing 0.2
                next-screen-context-lines 4
                shr-use-colors nil)
    (require 'visual-fill-column nil t)
    (setq-local visual-fill-column-center-text t
                visual-fill-column-width 80
                nov-text-width 80)
    (visual-fill-column-mode 1)
    (hl-line-mode -1)

    (add-to-list '+lookup-definition-functions #'+lookup/dictionary-definition)

    (setq-local mode-line-format
                `((:eval
                   (doom-modeline-segment--workspace-name))
                  (:eval
                   (doom-modeline-segment--window-number))
                  (:eval
                   (doom-modeline-segment--nov-info))
                  ,(propertize
                    " %P "
                    'face 'doom-modeline-buffer-minor-mode)
                  ,(propertize
                    " "
                    'face (if (doom-modeline--active) 'mode-line 'mode-line-inactive)
                    'display `((space
                                :align-to
                                (- (+ right right-fringe right-margin)
                                   ,(* (let ((width (doom-modeline--font-width)))
                                         (or (and (= width 1) 1)
                                             (/ width (frame-char-width) 1.0)))
                                       (string-width
                                        (format-mode-line (cons "" '(:eval (doom-modeline-segment--major-mode))))))))))
                  (:eval (doom-modeline-segment--major-mode)))))

  (add-hook 'nov-mode-hook #'+nov-mode-setup))
#+end_src
** lexic
#+BEGIN_SRC emacs-lisp
(use-package! lexic
  :commands lexic-search lexic-list-dictionary
)
#+END_SRC
** elfeed

*** Keybindings
#+begin_src emacs-lisp
(map! :map elfeed-search-mode-map
      :after elfeed-search
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :n "q" #'+rss/quit
      :n "e" #'elfeed-update
      :n "r" #'elfeed-search-untag-all-unread
      :n "u" #'elfeed-search-tag-all-unread
      :n "s" #'elfeed-search-live-filter
      :n "RET" #'elfeed-search-show-entry
      :n "p" #'elfeed-show-pdf
      :n "+" #'elfeed-search-tag-all
      :n "-" #'elfeed-search-untag-all
      :n "S" #'elfeed-search-set-filter
      :n "b" #'elfeed-search-browse-url
      :n "y" #'elfeed-search-yank
      :n "e" #'prot/elfeed-show-eww
      :n "o" #'prot/elfeed-search-other-window
      :n "v" #'prot/elfeed-mpv-dwim
        )

(map! :map elfeed-show-mode-map
      :after elfeed-show
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :nm "q" #'+rss/delete-pane
      :nm "o" #'ace-link-elfeed
      :nm "RET" #'org-ref-elfeed-add
      :nm "n" #'elfeed-show-next
      :nm "N" #'elfeed-show-prev
      :nm "p" #'elfeed-show-pdf
      :nm "+" #'elfeed-show-tag
      :nm "-" #'elfeed-show-untag
      :nm "s" #'elfeed-show-new-live-search
      :nm "y" #'elfeed-show-yank
      :nm "e" #'prot/elfeed-show-eww
      :nm "v" #'prot/elfeed-mpv-dwim
      :nm "a" #'prot/elfeed-show-archive
        )


#+end_src

*** Visual
#+BEGIN_SRC emacs-lisp

        (after! elfeed

          (elfeed-org)
          (use-package! elfeed-link)

          (setq elfeed-search-filter "@4-week-ago +unread"
                                                ;                elfeed-search-print-entry-function '+rss/elfeed-search-print-entry
                elfeed-search-title-min-width 80
                elfeed-show-entry-switch #'pop-to-buffer
                elfeed-show-entry-delete #'+rss/delete-pane
                elfeed-show-refresh-function #'+rss/elfeed-show-refresh--better-style
                shr-max-image-proportion 0.4)

          (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
          (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

          (defface elfeed-show-title-face '((t (:weight ultrabold :slant italic :height 1.8)))
            "title face in elfeed show buffer"
            :group 'elfeed)
          (defface elfeed-show-author-face `((t (:weight light)))
            "title face in elfeed show buffer"
            :group 'elfeed)
          (set-face-attribute 'elfeed-search-title-face nil
                              :foreground 'nil
                              :weight 'light)

          (defadvice! +rss-elfeed-wrap-h-nicer ()
            "Enhances an elfeed entry's readability by wrapping it to a width of
        `fill-column' and centering it with `visual-fill-column-mode'."
            :override #'+rss-elfeed-wrap-h
            (let ((inhibit-read-only t)
                  (inhibit-modification-hooks t))
              (setq-local truncate-lines nil)
              (setq-local shr-width 120)
              (setq-local line-spacing 0.0)
              (setq-local visual-fill-column-center-text t)
              (visual-fill-column-mode)
              ;; (setq-local shr-current-font '(:family "Merriweather" :height 1.2))
              (set-buffer-modified-p nil)))

          (defun +rss/elfeed-search-print-entry (entry)
            "Print ENTRY to the buffer."
            (let* ((elfeed-goodies/tag-column-width 40)
                   (elfeed-goodies/feed-source-column-width 30)
                   (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
                   (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
                   (feed (elfeed-entry-feed entry))
                   (feed-title
                    (when feed
                      (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
                   (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
                   (tags-str (concat (mapconcat 'identity tags ",")))
                   (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                                   elfeed-goodies/tag-column-width 4))

                   (tag-column (elfeed-format-column
                                tags-str (elfeed-clamp (length tags-str)
                                                       elfeed-goodies/tag-column-width
                                                       elfeed-goodies/tag-column-width)
                                :left))
                   (feed-column (elfeed-format-column
                                 feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                          elfeed-goodies/feed-source-column-width
                                                          elfeed-goodies/feed-source-column-width)
                                 :left)))

              (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
              (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
              (insert (propertize title 'face title-faces 'kbd-help title))
              (setq-local line-spacing 0.2)))

          (defun +rss/elfeed-show-refresh--better-style ()
            "Update the buffer to match the selected entry, using a mail-style."
            (interactive)
            (let* ((inhibit-read-only t)
                   (title (elfeed-entry-title elfeed-show-entry))
                   (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
                   (author (elfeed-meta elfeed-show-entry :author))
                   (link (elfeed-entry-link elfeed-show-entry))
                   (tags (elfeed-entry-tags elfeed-show-entry))
                   (tagsstr (mapconcat #'symbol-name tags ", "))
                   (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
                   (content (elfeed-deref (elfeed-entry-content elfeed-show-entry)))
                   (type (elfeed-entry-content-type elfeed-show-entry))
                   (feed (elfeed-entry-feed elfeed-show-entry))
                   (feed-title (elfeed-feed-title feed))
                   (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
              (erase-buffer)
              (insert "\n")
              (insert (format "%s\n\n" (propertize title 'face 'elfeed-show-title-face)))
              (insert (format "%s\t" (propertize feed-title 'face 'elfeed-search-feed-face)))
              (when (and author elfeed-show-entry-author)
                (insert (format "%s\n" (propertize author 'face 'elfeed-show-author-face))))
              (insert (format "%s\n\n" (propertize nicedate 'face 'elfeed-log-date-face)))
              (when tags
                (insert (format "%s\n"
                                (propertize tagsstr 'face 'elfeed-search-tag-face))))
              ;; (insert (propertize "Link: " 'face 'message-header-name))
              ;; (elfeed-insert-link link link)
              ;; (insert "\n")
              (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
                       do (insert (propertize "Enclosure: " 'face 'message-header-name))
                       do (elfeed-insert-link (car enclosure))
                       do (insert "\n"))
              (insert "\n")
              (if content
                  (if (eq type 'html)
                      (elfeed-insert-html content base)
                    (insert content))
                (insert (propertize "(empty)\n" 'face 'italic)))
              (goto-char (point-min))))

          )
        (after! elfeed-org
          :config
          (add-hook! 'elfeed-search-mode-hook 'elfeed-update)
          (setq elfeed-db-directory "~/Documents/elfeed")
          (setq rmh-elfeed-org-files (list "~/.doom.d/elfeed.org"))

                                                ;taken from https://protesilaos.com/dotemacs/#h:0cd8ddab-55d1-40df-b3db-1234850792ba
          (defun prot/elfeed-show-eww (&optional link)
            "Browse current `elfeed' entry link in `eww'.
        Only show the readable part once the website loads.  This can
        fail on poorly-designed websites."
            (interactive)
            (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                              elfeed-show-entry
                            (elfeed-search-selected :ignore-region)))
                   (link (if link link (elfeed-entry-link entry))))
              (eww link)
              (add-hook 'eww-after-render-hook 'eww-readable nil t)))


          (defun prot/elfeed-search-other-window (&optional arg)
            "Browse `elfeed' entry in the other window.
        With \\[universal-argument] browse the entry in `eww' using the
        `prot/elfeed-show-eww' wrapper."
            (interactive "P")
            (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                              elfeed-show-entry
                            (elfeed-search-selected :ignore-region)))
                   (link (elfeed-entry-link entry))
                   (win (selected-window)))
              (with-current-buffer (get-buffer "*elfeed-search*")
                (unless (one-window-p)              ; experimental
                  (delete-other-windows win))
                (split-window win (/ (frame-height) 5) 'below)
                (other-window 1)
                (if arg
                    (progn
                      (when (eq major-mode 'elfeed-search-mode)
                        (elfeed-search-untag-all-unread))
                      (prot/elfeed-show-eww link))
                  (elfeed-search-show-entry entry)))))

          (defvar prot/elfeed-mpv-hook nil
            "Hook called before `prot/elfeed-mpv-dwim'.")

          ;; TODO make this buffer more useful, such as running it in a
          ;; shell-aware mode.
          (defun prot/elfeed-mpv-buffer ()
            "Prepare \"*elfeed-mpv-output*\" buffer.
        For use by `prot/elfeed-mpv-dwim'.  To be called from
        `prot/elfeed-mpv-hook'."
            (let ((buf (get-buffer "*elfeed-mpv-output*"))
                  (inhibit-read-only t))
              (with-current-buffer buf
                (erase-buffer))))

          (defun prot/elfeed-mpv-dwim ()
            "Play entry link with external `mpv' program.
        When there is an audio enclosure (podcast), play just the audio.
        Else spawn a video player at a resolution that accounts for the
        current monitor's width."
            (interactive)
            (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                              elfeed-show-entry
                            (elfeed-search-selected :ignore-region)))
                   (link (elfeed-entry-link entry))
                   (enclosure (elt (car (elfeed-entry-enclosures entry)) 0)) ; fragile?
                   (audio "--no-video")
                   ;; Here the display width checks if I am on the laptop
                   (height (if (<= (display-pixel-width ) 1366) 720 1080))
                   (video (format "--ytdl-format=bestvideo[height<=?%s]+bestaudio/best" height))
                   (buf (pop-to-buffer "*elfeed-mpv-output*")))
              (run-hooks 'prot/elfeed-mpv-hook)
              (if enclosure              ; make this its own parametrised function
                  (progn
                    (start-process "audio-mpv" buf "mpv" audio enclosure)
                    (message (concat "Launching MPV for " (propertize enclosure 'face 'success))))
                (start-process "video-mpv" buf "mpv" video link)
                (message (concat "Launching MPV for " (propertize link 'face 'success))))))

          (defun prot/elfeed-show-archive ()
            "Create an archive copy of the current `elfeed' entry."
            (interactive)
            (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                              elfeed-show-entry
                            (elfeed-search-selected :ignore-region)))
                   ;; TODO how to cleanly add hyphens instead of spaces?
                   (title (elfeed-entry-title entry))
                   (elfeed-show-truncate-long-urls nil)
                   (archives "~/Documents/feeds/")
                   (file (format "%s%s.org" archives title)))
              (unless (file-exists-p archives)
                (make-directory archives t))
              (when (derived-mode-p 'elfeed-show-mode)
                ;; Refresh to expand truncated URLs
                (elfeed-show-refresh)
                (write-file file t)
                (message "Saved buffer at %s" file))))

          (add-hook 'prot/elfeed-mpv-hook #'prot/elfeed-mpv-buffer)



          )
#+END_SRC


** GTD and PARA
Inspired from https://github.com/mwfogleman/.emacs.d/blob/master/michael.org
*** Projects
A project is ‚Äúany outcome that will take more than one action step to complete.‚Äù As a result of implementing Tiago Forte‚Äôs ‚ÄúPARA‚Äù system, I can ensure that I always have an up to date project list.
#+begin_src emacs-lisp
(after! org (defun go-to-projects ()
  (interactive)
  (find-file org-basb-main-file)
  (widen)
  (beginning-of-buffer)
  (re-search-forward "* Projects")
  (beginning-of-line))

(defun project-overview ()
  (interactive)
  (go-to-projects)
  (org-narrow-to-subtree)
  (org-sort-entries t ?p)
  (org-columns))

(defun project-deadline-overview ()
  (interactive)
  (go-to-projects)
  (org-narrow-to-subtree)
  (org-sort-entries t ?d)
  (org-columns))
)
#+end_src
The concept of Stuck Projects comes from David Allen‚Äôs GTD. A stuck project is a project without any action steps or tasks associated with it.

Org-Mode has the ability to tell you which subtrees don‚Äôt have tasks associated with them. You can also configure what it recognizes as a stuck project. Unfortunately, by default, this functionality picks up a lot of noise.

This function creates an agenda of stuck projects that is restricted to my ‚ÄúProjects‚Äù subtree.
#+begin_src emacs-lisp
(after! org (defun my-org-agenda-list-stuck-projects ()
  (interactive)
  (go-to-projects)
  (org-agenda nil "#" 'subtree))
)
#+end_src

*** Areas
#+begin_src emacs-lisp
(after! org  (defun go-to-areas ()
    (interactive)
    (find-file org-basb-main-file)
    (widen)
    (beginning-of-buffer)
    (re-search-forward "* Areas")
    (beginning-of-line))

(defun areas-overview ()
    (interactive)
    (go-to-areas)
    (org-narrow-to-subtree)
    (org-columns))
)
#+end_src

*** Reviews
#+begin_src emacs-lisp
(after! org (defun my-new-daily-review ()
  (interactive)
  (let ((org-capture-templates '(("d" "Review: Daily Review" entry (file+olp+datetree "/tmp/reviews.org")
                                  (file "~/.doom.d/templates/dailyreviewtemplate.org")))))
    (progn
      (org-capture nil "d")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree)
      (fetch-calendar)
      (org-clock-in))))

(defun my-new-weekly-review ()
  (interactive)
  (let ((org-capture-templates '(("w" "Review: Weekly Review" entry (file+olp+datetree "/tmp/reviews.org")
                                  (file "~/.doom.d/templates/weeklyreviewtemplate.org")))))
    (progn
      (org-capture nil "w")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree)
      (fetch-calendar)
      (org-clock-in))))

(defun my-new-monthly-review ()
  (interactive)
  (let ((org-capture-templates '(("m" "Review: Monthly Review" entry (file+olp+datetree "/tmp/reviews.org")
                                  (file "~/.doom.d/templates/monthlyreviewtemplate.org")))))
    (progn
      (org-capture nil "m")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree)
      (fetch-calendar)
      (org-clock-in))))


;(bind-keys :prefix-map review-map
;           :prefix "C-z d"
;           ("d" . my-new-daily-review)
;           ("w" . my-new-weekly-review)
;           ("m" . my-new-monthly-review))

(f-touch "/tmp/reviews.org")

)


#+end_src

** Mail setup
*** Mu4e
#+BEGIN_SRC emacs-lisp

(after! mu4e
  ;; spell check
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)




                                        ;(setq mu4e-compose-signature-auto-include t)


  ;; setup some handy shortcuts
  ;; you can quickly switch to your Inbox -- press ``ji''
  ;; then, when you want archive some messages, move them to
  ;; the 'All Mail' folder by pressing ``ma''.
  (setq mu4e-maildir-shortcuts
        '( ("/Chalmers/Inbox"               . ?i)
           ("/Personal/Inbox"   . ?p)
           ("/Chalmers/Drafts" . ?d)
           ("/Personal/Drafts". ?D)
           ("/Chalmers/Trash"       . ?t)
           ("/Chalmers/All Mail"    . ?a)))




  (setq mu4e-enable-mode-line t)
  (setq mu4e-contexts
        `(, (make-mu4e-context
             :name "w ashfaqf@chalmers.se"
             :enter-func (lambda () (mu4e-message "Enter ashfaqf@chalmers.se context"))
             :leave-func (lambda () (mu4e-message "Leave ashfaqf@chalmers.se context"))
             ;; we match based on the contact-fields of the message (that we are replying to)
             ;; https://www.djcbsoftware.nl/code/mu/mu4e/What-are-contexts.html#What-are-contexts
             :match-func (lambda (msg)
                           (when msg
                             (mu4e-message-contact-field-matches msg
                                                                 :to "ashfaqf@chalmers.se")))
             :vars '( ( user-mail-address      . "ashfaqf@chalmers.se"  )
                      ( user-full-name         . "Ashfaq Farooqui" )
                      ( mu4e-drafts-folder .  "/Chalmers/Drafts")
                      ( mu4e-sent-folder  . "/Chalmers/Sent")
                      ( mu4e-trash-folder . "/Chalmers/Trash")
                      ( mu4e-attachment-dir . "~/Documents/MailAttachments/Chalmers")
                      ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
                      (setq mu4e-sent-messages-behavior 'delete)
                      ( smtpmail-smtp-server   . "localhost" )
                      (smtpmail-stream-type . nil )
                      ( smtpmail-smtp-service . 1025)
                      ;;      ( mu4e-compose-signature .
                      ;;                              "//Ashfaq")
                      ))

            ,(make-mu4e-context
              :name "p ashfaq@ashfaqfarooqui.me"
              :enter-func (lambda () (mu4e-message "Enter ashfaq@ashfaqfarooqui.me context"))
              ;; no leave-func
              ;; we match based on the contact-fields of the message
              :match-func (lambda (msg)
                            (when msg
                              (mu4e-message-contact-field-matches msg
                                                                  :to "ashfaq@ashfaqfarooqui.me")))
              :vars '( ( user-mail-address       . "ashfaq@ashfaqfarooqui.me" )
                       ( user-full-name          . "Ashfaq Farooqui" )
                       (smtpmail-smtp-user . "ashfaq.farooqui@mailbox.org")
                       (mu4e-sent-messages-behavior . sent)
                       (mu4e-attachment-dir . "~/Documents/MailAttachments/Personal")
                       ( mu4e-drafts-folder . "/Personal/Drafts")
                       ( mu4e-sent-folder  . "/Personal/Sent")
                       ( mu4e-trash-folder . "/Personal/Trash")
                       (mu4e-refile-folder . "/Personal/Archive")
                       (smtpmail-smtp-server . "smtp.mailbox.org")
                       (smtpmail-stream-type . ssl )
                       (smtpmail-smtp-service . 465)))

            ))
                                        ;(setq smtpmail-debug-verb t)


                                        ;(setq mu4e-compose-signature message-signature)


  )
#+END_SRC

*** MU4e attachments
#+BEGIN_SRC emacs-lisp

       ;;;Taking the below from [[http://mbork.pl/2016-02-06_An_attachment_reminder_in_mu4e]]
(after! mu4e
    (defun mbork/message-attachment-present-p ()
      "Return t if an attachment is found in the current message."
      (save-excursion
        (save-restriction
          (widen)
          (goto-char (point-min))
          (when (search-forward "<#part" nil t) t))))

    (defcustom mbork/message-attachment-intent-re
      (regexp-opt '("I attach"
                    "I have attached"
                    "I've attached"
                    "I have included"
                    "I've included"
                    "see the attached"
                    "see the attachment"
                    "attached file"))
      "A regex which - if found in the message, and if there is no
    attachment - should launch the no-attachment warning.")

    (defcustom mbork/message-attachment-reminder
      "Are you sure you want to send this message without any attachment? "
      "The default question asked when trying to send a message
    containing `mbork/message-attachment-intent-re' without an
    actual attachment.")

    (defun mbork/message-warn-if-no-attachments ()
      "Ask the user if s?he wants to send the message even though
    there are no attachments."
      (when (and (save-excursion
                   (save-restriction
                     (widen)
                     (goto-char (point-min))
                     (re-search-forward mbork/message-attachment-intent-re nil t)))
                 (not (mbork/message-attachment-present-p)))
        (unless (y-or-n-p mbork/message-attachment-reminder)
          (keyboard-quit))))

    (add-hook 'message-send-hook #'mbork/message-warn-if-no-attachments)


)
#+END_SRC

*** org-msg
#+begin_src emacs-lisp
(after! org-msg
                                        ;use-package! org-msg
                                        ;  :after mu4e
                                        ;:config
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil"
	org-msg-startup "hidestars indent inlineimages"
	org-msg-greeting-fmt "\nHi *%s*,\n\n"
	org-msg-greeting-name-limit 3
	org-msg-signature "



 #+begin_signature
 //Ashfaq
 #+end_signature")
  )
#+end_src

